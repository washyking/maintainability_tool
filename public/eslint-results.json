[
  {
    "filePath": "/Users/alviiin./Desktop/sem3/research/preact-www/src/components/app.jsx",
    "messages": [
      {
        "ruleId": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: This experimental syntax requires enabling one of the following parser plugin(s): \"jsx\", \"flow\", \"typescript\". (12:2)",
        "line": 12,
        "column": 2,
        "nodeType": null
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { LocationProvider, ErrorBoundary } from 'preact-iso';\nimport { LanguageProvider } from '../lib/i18n';\nimport { PrerenderDataProvider } from '../lib/prerender-data.jsx';\nimport Header from './header';\nimport Routes from './routes';\n\n/**\n * @param {{ prerenderData?: import('../types.d.ts').PrerenderData }} props\n */\nexport default function App({ prerenderData }) {\n\treturn (\n\t\t<ErrorBoundary>\n\t\t\t<LocationProvider>\n\t\t\t\t<LanguageProvider>\n\t\t\t\t\t<PrerenderDataProvider value={prerenderData}>\n\t\t\t\t\t\t<Header />\n\t\t\t\t\t\t<Routes />\n\t\t\t\t\t</PrerenderDataProvider>\n\t\t\t\t</LanguageProvider>\n\t\t\t</LocationProvider>\n\t\t</ErrorBoundary>\n\t);\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/alviiin./Desktop/sem3/research/preact-www/src/components/blog-meta/index.jsx",
    "messages": [
      {
        "ruleId": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: This experimental syntax requires enabling one of the following parser plugin(s): \"jsx\", \"flow\", \"typescript\". (7:2)",
        "line": 7,
        "column": 2,
        "nodeType": null
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Time } from '../time';\nimport config from '../../config.json';\nimport style from './style.module.css';\n\nexport default function BlogMeta({ meta }) {\n\treturn (\n\t\t<div class={style.blogMeta}>\n\t\t\t{meta.date && <Time value={meta.date} />}\n\t\t\t{Array.isArray(meta.authors) && meta.authors.length > 0 && (\n\t\t\t\t<>\n\t\t\t\t\t, written by{' '}\n\t\t\t\t\t<address class={style.authors}>\n\t\t\t\t\t\t{meta.authors.map((author, i, arr) => {\n\t\t\t\t\t\t\tconst authorData = config.blogAuthors.find(\n\t\t\t\t\t\t\t\tdata => data.name === author\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<AuthorLinks\n\t\t\t\t\t\t\t\t\tauthorData={authorData}\n\t\t\t\t\t\t\t\t\tauthor={author}\n\t\t\t\t\t\t\t\t\ti={i}\n\t\t\t\t\t\t\t\t\tarr={arr}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t\t{(meta.translation_by || []).map((author, i, arr) => {\n\t\t\t\t\t\t\tconst authorData = config.blogAuthors.find(\n\t\t\t\t\t\t\t\tdata => data.name === author\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t{', translated by '}\n\t\t\t\t\t\t\t\t\t<AuthorLinks\n\t\t\t\t\t\t\t\t\t\tauthorData={authorData}\n\t\t\t\t\t\t\t\t\t\tauthor={author}\n\t\t\t\t\t\t\t\t\t\ti={i}\n\t\t\t\t\t\t\t\t\t\tarr={arr}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</address>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\nfunction AuthorLinks({ authorData, author, i, arr }) {\n\treturn (\n\t\t<span key={author}>\n\t\t\t{authorData ? (\n\t\t\t\t<a href={authorData.link} target=\"_blank\" rel=\"noopener noreferrer\">\n\t\t\t\t\t{author}\n\t\t\t\t</a>\n\t\t\t) : (\n\t\t\t\t<span>{author}</span>\n\t\t\t)}\n\t\t\t{i < arr.length - 2 ? ', ' : i === arr.length - 2 ? ' and ' : null}\n\t\t</span>\n\t);\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/alviiin./Desktop/sem3/research/preact-www/src/components/blog-overview/index.jsx",
    "messages": [
      {
        "ruleId": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: This experimental syntax requires enabling one of the following parser plugin(s): \"jsx\", \"flow\", \"typescript\". (13:2)",
        "line": 13,
        "column": 2,
        "nodeType": null
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import config from '../../config.json';\nimport { useLanguage, useTranslation } from '../../lib/i18n';\nimport { getRouteName } from '../header';\nimport { Time } from '../time';\nimport { prefetchContent } from '../../lib/use-resource';\nimport s from './style.module.css';\n\nexport default function BlogOverview() {\n\tconst [lang] = useLanguage();\n\tconst continueReading = useTranslation('continueReading');\n\n\treturn (\n\t\t<div>\n\t\t\t<div class={s.postList}>\n\t\t\t\t{config.blog.map(post => {\n\t\t\t\t\tconst name = getRouteName(post, lang);\n\t\t\t\t\tconst excerpt = post.excerpt[lang] || post.excerpt.en;\n\t\t\t\t\tconst onMouseOver = () => prefetchContent(post.path);\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<article class={s.post}>\n\t\t\t\t\t\t\t<div class={s.meta}>\n\t\t\t\t\t\t\t\t<Time value={post.date} />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<h2 class={s.title}>\n\t\t\t\t\t\t\t\t<a href={post.path} onMouseOver={onMouseOver}>{name}</a>\n\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t<p class={s.excerpt}>{excerpt}</p>\n\t\t\t\t\t\t\t<a href={post.path} onMouseOver={onMouseOver} class=\"btn-small\">\n\t\t\t\t\t\t\t\t{continueReading} &rarr;\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</article>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/alviiin./Desktop/sem3/research/preact-www/src/components/branding/index.jsx",
    "messages": [
      {
        "ruleId": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: This experimental syntax requires enabling one of the following parser plugin(s): \"jsx\", \"flow\", \"typescript\". (6:2)",
        "line": 6,
        "column": 2,
        "nodeType": null
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import style from './style.module.css';\nimport config from '../../config.json';\n\nexport default function Branding() {\n\treturn (\n\t\t<section class={style.logos}>\n\t\t\t{config.branding.map(asset => (\n\t\t\t\t<LogoVariation name={asset.name} alt={asset.alt} />\n\t\t\t))}\n\t\t</section>\n\t);\n}\n\nfunction LogoVariation({ name, alt }) {\n\treturn (\n\t\t<div class={style.variation}>\n\t\t\t<img\n\t\t\t\tsrc={`/branding/${name}.svg`}\n\t\t\t\talt={alt}\n\t\t\t\tloading=\"lazy\"\n\t\t\t\theight=\"64\"\n\t\t\t/>\n\t\t\t<div class={style.links}>\n\t\t\t\t<a\n\t\t\t\t\thref={`/branding/${name}.svg`}\n\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\trel=\"noreferrer\"\n\t\t\t\t>\n\t\t\t\t\tSVG\n\t\t\t\t</a>\n\t\t\t\t<a\n\t\t\t\t\thref={`/branding/${name}.png`}\n\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\trel=\"noreferrer\"\n\t\t\t\t>\n\t\t\t\t\tPNG\n\t\t\t\t</a>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/alviiin./Desktop/sem3/research/preact-www/src/components/code-editor/index.jsx",
    "messages": [
      {
        "ruleId": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: This experimental syntax requires enabling one of the following parser plugin(s): \"jsx\", \"flow\", \"typescript\". (96:8)",
        "line": 96,
        "column": 8,
        "nodeType": null
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useRef, useEffect } from 'preact/hooks';\nimport { EditorView } from 'codemirror';\nimport { lineNumbers, keymap, highlightActiveLineGutter, highlightActiveLine } from '@codemirror/view';\nimport { EditorState, Transaction } from '@codemirror/state';\nimport { defaultKeymap, history, historyKeymap, indentWithTab } from '@codemirror/commands';\nimport { javascript } from '@codemirror/lang-javascript';\nimport { syntaxHighlighting, HighlightStyle, indentUnit, bracketMatching } from '@codemirror/language';\nimport { tags } from '@lezer/highlight';\nimport { closeBrackets, autocompletion } from '@codemirror/autocomplete';\nimport cx from '../../lib/cx';\n\nimport style from './style.module.css';\nimport './code-mirror.css';\n\n// Custom theme that better matches our Prism config, though\n// the lexer is somewhat limited so it still deviates\nconst highlightStyle = HighlightStyle.define([\n\t{ tag: tags.keyword, class: 'cm-keyword' },\n\t{ tag: [tags.definition(tags.function(tags.name)), tags.function(tags.name), tags.propertyName], class: 'cm-function' },\n\t{ tag: tags.literal, class: 'cm-literal' },\n\t{ tag: tags.tagName, class: 'cm-tag' },\n\t{ tag: tags.attributeName, class: 'cm-attribute' },\n\t{ tag: tags.string, class: 'cm-string' },\n\t{ tag: [tags.operator], class: 'cm-operator' },\n\t{ tag: tags.comment, class: 'cm-comment' },\n\t{ tag: tags.invalid, class: 'cm-invalid' }\n]);\n\n/**\n * @param {object} props\n * @param {string} props.value\n * @param {(value: string) => void} props.onInput\n * @param {any} props.error - Unused at this time\n * @param {string} props.slug\n * @param {string} [props.class]\n */\nexport default function CodeEditor(props) {\n\tconst editorParent = useRef(null);\n\t/** @type {{ current: EditorView | null }} */\n\tconst editor = useRef(null);\n\n\tconst routeHasChanged = useRef(false);\n\n\tuseEffect(() => {\n\t\tif (props.slug || !editor.current) routeHasChanged.current = true;\n\t}, [props.slug]);\n\n\tuseEffect(() => {\n\t\tif (routeHasChanged.current === false) return;\n\t\trouteHasChanged.current = false;\n\n\t\tif (editor.current) {\n\t\t\teditor.current.dispatch({\n\t\t\t\tchanges: { from: 0, to: editor.current.state.doc.length, insert: props.value }\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tconst theme = EditorView.theme({}, { dark: true });\n\n\t\tconst state = EditorState.create({\n\t\t\tdoc: props.value,\n\t\t\textensions: [\n\t\t\t\tlineNumbers(),\n\t\t\t\thighlightActiveLine(),\n\t\t\t\thighlightActiveLineGutter(),\n\t\t\t\thistory(),\n\t\t\t\tindentUnit.of('\\t'),\n\t\t\t\tcloseBrackets(),\n\t\t\t\tbracketMatching(),\n\t\t\t\tautocompletion(),\n\t\t\t\tjavascript({ jsx: true }),\n\t\t\t\tkeymap.of([indentWithTab, ...defaultKeymap, ...historyKeymap]),\n\t\t\t\t[theme, syntaxHighlighting(highlightStyle, { fallback: true })],\n\t\t\t\tEditorView.updateListener.of(update => {\n\t\t\t\t\t// Ignores changes from swapping out the editor code programmatically\n\t\t\t\t\tif (isViewUpdateFromUserInput(update)) {\n\t\t\t\t\t\tprops.onInput(update.state.doc.toString());\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t]\n\t\t});\n\n\t\teditor.current = new EditorView({\n\t\t\tstate,\n\t\t\tparent: editorParent.current\n\t\t});\n\t}, [props.value]);\n\n\tuseEffect(() => (\n\t\t() => {\n\t\t\tif (editor.current) editor.current.destroy();\n\t\t}\n\t), []);\n\n\treturn <div ref={editorParent} class={cx(style.codeEditor, props.class)} />;\n}\n\n/** @param {import('@codemirror/view').ViewUpdate} viewUpdate */\nfunction isViewUpdateFromUserInput(viewUpdate) {\n\tif (viewUpdate.docChanged) {\n\t\tfor (const transaction of viewUpdate.transactions) {\n\t\t\tif (transaction.annotation(Transaction.userEvent)) return true;\n\t\t}\n\t}\n\treturn false;\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/alviiin./Desktop/sem3/research/preact-www/src/components/content-region/index.jsx",
    "messages": [
      {
        "ruleId": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: This experimental syntax requires enabling one of the following parser plugin(s): \"jsx\", \"flow\", \"typescript\". (17:9)",
        "line": 17,
        "column": 9,
        "nodeType": null
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useEffect } from 'preact/hooks';\nimport Markup from 'preact-markup';\nimport widgets from '../widgets';\nimport style from './style.module.css';\nimport { useTranslation } from '../../lib/i18n';\nimport { TocContext } from '../table-of-contents';\nimport { prefetchContent } from '../../lib/use-resource';\n\nconst COMPONENTS = {\n\t...widgets,\n\ta(props) {\n\t\tif (props.href && props.href.startsWith('/')) {\n\t\t\tconst url = new URL(props.href, location.origin);\n\t\t\tprops.onMouseOver = () => prefetchContent(url.pathname);\n\t\t}\n\n\t\treturn <a {...props} />;\n\t}\n};\n\nfunction SiblingNav({ route, lang, start }) {\n\tlet title = '';\n\tlet url = '';\n\tif (route) {\n\t\turl = route.path.toLowerCase();\n\t\ttitle =\n\t\t\ttypeof route.name === 'object'\n\t\t\t\t? route.name[lang || 'en']\n\t\t\t\t: route.name || route.title;\n\t}\n\tconst label = useTranslation(start ? 'previous' : 'next');\n\n\treturn (\n\t\t<a class={style.nextLink} data-dir-end={!start} href={url}>\n\t\t\t{start && <span class={style.icon}>&larr;&nbsp;</span>}\n\t\t\t{!start && <span class={style.icon}>&nbsp;&rarr;</span>}\n\t\t\t<span class={style.nextInner}>\n\t\t\t\t<span class={style.nextTitle}>\n\t\t\t\t\t<span class={style.nextTitleInner}>{title}</span>\n\t\t\t\t</span>\n\t\t\t\t<span class={style.nextUrl}>{label}</span>\n\t\t\t</span>\n\t\t</a>\n\t);\n}\n\nexport default function ContentRegion({ content, components, ...props }) {\n\tconst hasNav = !!(props.next || props.prev);\n\tcomponents = Object.assign({}, COMPONENTS, components);\n\n\tuseEffect(() => {\n\t\tconst hash = location.hash;\n\t\tif (hash) {\n\t\t\t// Hack to force a scroll\n\t\t\tlocation.hash = '';\n\t\t\tlocation.hash = hash;\n\t\t}\n\t}, [props.current]);\n\n\treturn (\n\t\t<content-region name={props.current} data-page-nav={hasNav} can-edit={props.canEdit}>\n\t\t\t{content && (\n\t\t\t\t<TocContext.Provider value={{ toc: props.toc }}>\n\t\t\t\t\t<Markup\n\t\t\t\t\t\tmarkup={content}\n\t\t\t\t\t\ttype=\"html\"\n\t\t\t\t\t\ttrim={false}\n\t\t\t\t\t\tcomponents={components}\n\t\t\t\t\t/>\n\t\t\t\t</TocContext.Provider>\n\t\t\t)}\n\t\t\t{hasNav && (\n\t\t\t\t<div class={style.nextWrapper}>\n\t\t\t\t\t{props.prev ? (\n\t\t\t\t\t\t<SiblingNav start lang={props.lang} route={props.prev} />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<span />\n\t\t\t\t\t)}\n\t\t\t\t\t{props.next ? (\n\t\t\t\t\t\t<SiblingNav lang={props.lang} route={props.next} />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<span />\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</content-region>\n\t);\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/alviiin./Desktop/sem3/research/preact-www/src/components/controllers/blog-page.jsx",
    "messages": [
      {
        "ruleId": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: This experimental syntax requires enabling one of the following parser plugin(s): \"jsx\", \"flow\", \"typescript\". (14:9)",
        "line": 14,
        "column": 9,
        "nodeType": null
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useRoute } from 'preact-iso';\nimport { useContent } from '../../lib/use-content';\nimport { NotFound } from './not-found';\nimport { MarkdownRegion } from './markdown-region';\nimport Footer from '../footer/index';\nimport { blogRoutes } from '../../lib/route-utils';\nimport style from './style.module.css';\n\nexport default function BlogPage() {\n\tconst { params } = useRoute();\n\tconst { slug } = params;\n\n\tif (!blogRoutes[`/blog/${slug}`]) {\n\t\treturn <NotFound />;\n\t}\n\n\treturn <BlogLayout />;\n}\n\nfunction BlogLayout() {\n\tconst { path } = useRoute();\n\tconst { html, meta } = useContent(path);\n\n\treturn (\n\t\t<div class={style.page}>\n\t\t\t<div class={style.outer}>\n\t\t\t\t<div class={style.inner}>\n\t\t\t\t\t<MarkdownRegion html={html} meta={meta} />\n\t\t\t\t\t<Footer />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/alviiin./Desktop/sem3/research/preact-www/src/components/controllers/doc-page.jsx",
    "messages": [
      {
        "ruleId": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: This experimental syntax requires enabling one of the following parser plugin(s): \"jsx\", \"flow\", \"typescript\". (18:9)",
        "line": 18,
        "column": 9,
        "nodeType": null
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useRoute } from 'preact-iso';\nimport { useContent } from '../../lib/use-content';\nimport config from '../../config.json';\nimport { NotFound } from './not-found';\nimport cx from '../../lib/cx';\nimport { MarkdownRegion } from './markdown-region';\nimport Sidebar from '../sidebar';\nimport Footer from '../footer/index';\nimport { docRoutes } from '../../lib/route-utils';\nimport { LATEST_MAJOR } from '../doc-version';\nimport style from './style.module.css';\n\nexport function DocPage() {\n\tconst { params } = useRoute();\n\tconst { version, name } = params;\n\n\tif (!docRoutes[version]['/' + name]) {\n\t\treturn <NotFound />;\n\t}\n\n\treturn <DocLayout isGuide />;\n}\n\nexport function DocLayout({ isGuide = false }) {\n\tconst { path } = useRoute();\n\tconst { html, meta } = useContent(path === '/' ? 'index' : path);\n\n\treturn (\n\t\t<div class={cx(style.page, isGuide && style.withSidebar)}>\n\t\t\t<div class={style.outer}>\n\t\t\t\t{isGuide && (\n\t\t\t\t\t<div class={style.sidebarWrap}>\n\t\t\t\t\t\t<Sidebar />\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t<div class={style.inner}>\n\t\t\t\t\t{isGuide && <OldDocsWarning />}\n\t\t\t\t\t<MarkdownRegion html={html} meta={meta} />\n\t\t\t\t\t<Footer />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nfunction OldDocsWarning() {\n\tconst { name, version } = useRoute().params;\n\n\tif (version === LATEST_MAJOR) {\n\t\treturn null;\n\t}\n\n\tconst latestExists = config.docs[LATEST_MAJOR].some(section =>\n\t\tsection.routes.some(route => route.path === '/' + name)\n\t);\n\n\treturn (\n\t\t<div class={style.oldDocsWarning}>\n\t\t\tYou are viewing the documentation for an older version of Preact.\n\t\t\t{latestExists ? (\n\t\t\t\t<>\n\t\t\t\t\t{' '}\n\t\t\t\t\tSwitch to the{' '}\n\t\t\t\t\t<a href={`/guide/${LATEST_MAJOR}/${name}`}>current version</a>.\n\t\t\t\t</>\n\t\t\t) : (\n\t\t\t\t<>\n\t\t\t\t\t{' '}\n\t\t\t\t\tGet started with the{' '}\n\t\t\t\t\t<a href={`/guide/${LATEST_MAJOR}/getting-started`}>current version</a>\n\t\t\t\t\t.\n\t\t\t\t</>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/alviiin./Desktop/sem3/research/preact-www/src/components/controllers/markdown-region.jsx",
    "messages": [
      {
        "ruleId": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: This experimental syntax requires enabling one of the following parser plugin(s): \"jsx\", \"flow\", \"typescript\". (20:2)",
        "line": 20,
        "column": 2,
        "nodeType": null
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Fragment } from 'preact';\nimport { useRoute } from 'preact-iso';\nimport EditThisPage from '../edit-button';\nimport ContentRegion from '../content-region';\nimport BlogMeta from '../blog-meta';\n\n/**\n * @param {object} props\n * @propery {string} html\n * @propery {any} meta\n * @propery {any} [components]\n */\nexport function MarkdownRegion({ html, meta, components }) {\n\tconst { path } = useRoute();\n\n\tconst canEdit = path !== '/' && !path.startsWith('/tutorial');\n\tconst isBlogArticle = path.startsWith('/blog/');\n\n\treturn (\n\t\t<Fragment key={path}>\n\t\t\t{canEdit && <EditThisPage isFallback={meta.isFallback} />}\n\t\t\t{isBlogArticle && <BlogMeta meta={meta} />}\n\t\t\t<ContentRegion\n\t\t\t\tcurrent={path}\n\t\t\t\tcontent={html}\n\t\t\t\ttoc={meta.toc}\n\t\t\t\tcomponents={components}\n\t\t\t\tcanEdit={canEdit}\n\t\t\t/>\n\t\t</Fragment>\n\t);\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/alviiin./Desktop/sem3/research/preact-www/src/components/controllers/not-found.jsx",
    "messages": [
      {
        "ruleId": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: This experimental syntax requires enabling one of the following parser plugin(s): \"jsx\", \"flow\", \"typescript\". (10:2)",
        "line": 10,
        "column": 2,
        "nodeType": null
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useContent } from '../../lib/use-content';\nimport Footer from '../footer';\nimport { MarkdownRegion } from './markdown-region';\nimport style from './style.module.css';\n\nexport function NotFound() {\n\tconst { html, meta } = useContent('404');\n\n\treturn (\n\t\t<div class={style.page}>\n\t\t\t<div class={style.outer}>\n\t\t\t\t<div class={style.inner}>\n\t\t\t\t\t<MarkdownRegion html={html} meta={meta} />\n\t\t\t\t\t<Footer />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/alviiin./Desktop/sem3/research/preact-www/src/components/controllers/page.jsx",
    "messages": [
      {
        "ruleId": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: This experimental syntax requires enabling one of the following parser plugin(s): \"jsx\", \"flow\", \"typescript\". (10:9)",
        "line": 10,
        "column": 9,
        "nodeType": null
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useRoute } from 'preact-iso';\nimport { navRoutes } from '../../lib/route-utils';\nimport { NotFound } from './not-found';\nimport { DocLayout } from './doc-page';\n\nexport function Page() {\n\tconst { path } = useRoute();\n\n\tif (!navRoutes[path]) {\n\t\treturn <NotFound />;\n\t}\n\n\treturn <DocLayout />;\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/alviiin./Desktop/sem3/research/preact-www/src/components/controllers/repl/error-overlay.jsx",
    "messages": [
      {
        "ruleId": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: This experimental syntax requires enabling one of the following parser plugin(s): \"jsx\", \"flow\", \"typescript\". (16:2)",
        "line": 16,
        "column": 2,
        "nodeType": null
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useReducer } from 'preact/hooks';\nimport style from './error-overlay.module.css';\n\n/**\n * @param {Object} props\n * @param {string} props.name\n * @param {string} props.message\n * @param {{functionName: string, line: number, column: number}[]} props.stack\n * @param {string} [props.class]\n */\nexport function ErrorOverlay({ name, message, stack, class: c }) {\n\tconst [showStack, toggleStack] = useReducer(s => !s, false);\n\tconst hasStack = stack && stack.length > 0;\n\n\treturn (\n\t\t<div class={`${style.root} ${c || ''}`}>\n\t\t\t<h5>\n\t\t\t\t{name}: {message}\n\t\t\t</h5>\n\t\t\t{hasStack && (\n\t\t\t\t<button\n\t\t\t\t\tclass={style.showStack + ' ' + (showStack ? style.showing : '')}\n\t\t\t\t\tonClick={toggleStack}\n\t\t\t\t>\n\t\t\t\t\tError Stack\n\t\t\t\t</button>\n\t\t\t)}\n\t\t\t{hasStack && showStack && (\n\t\t\t\t<div class={style.stack}>\n\t\t\t\t\t{stack.map(frame => (\n\t\t\t\t\t\t<p class={style.frame}>\n\t\t\t\t\t\t\t{frame.functionName} :{frame.line}:{frame.column}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/alviiin./Desktop/sem3/research/preact-www/src/components/controllers/repl/index.jsx",
    "messages": [
      {
        "ruleId": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: This experimental syntax requires enabling one of the following parser plugin(s): \"jsx\", \"flow\", \"typescript\". (95:2)",
        "line": 95,
        "column": 2,
        "nodeType": null
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useState, useEffect } from 'preact/hooks';\nimport { useLocation, useRoute } from 'preact-iso';\nimport { Splitter } from '../../splitter';\nimport { textToBase64 } from './query-encode.js';\nimport { ErrorOverlay } from './error-overlay';\nimport { EXAMPLES, fetchExample } from './examples';\nimport { useStoredValue } from '../../../lib/localstorage';\nimport { useResource } from '../../../lib/use-resource';\nimport { parseStackTrace } from './errors';\nimport style from './style.module.css';\nimport REPL_CSS from './examples/style.css?raw';\n\n/**\n * @param {Object} props\n * @param {string} props.code\n * @param {string} [props.slug]\n */\nexport function Repl({ code }) {\n\tconst { route } = useLocation();\n\tconst { query } = useRoute();\n\tconst [editorCode, setEditorCode] = useStoredValue('preact-www-repl-code', code, true);\n\tconst [runnerCode, setRunnerCode] = useState(editorCode);\n\tconst [error, setError] = useState(null);\n\tconst [copied, setCopied] = useState(false);\n\n\t// TODO: Needs some work for prerendering to not cause pop-in\n\tif (typeof window === 'undefined') return null;\n\n\t/**\n\t * @type {{ Runner: import('./runner').default, CodeEditor: import('../../code-editor').default }}\n\t */\n\tconst { Runner, CodeEditor } = useResource(() => Promise.all([\n\t\timport('../../code-editor'),\n\t\timport('./runner')\n\t]).then(([CodeEditor, Runner]) => ({ CodeEditor: CodeEditor.default, Runner: Runner.default })), ['repl']);\n\n\tconst applyExample = (e) => {\n\t\tconst slug = e.target.value;\n\t\tfetchExample(slug)\n\t\t\t.then(code => {\n\t\t\t\tsetEditorCode(code);\n\t\t\t\tsetRunnerCode(code);\n\t\t\t\troute(`/repl?example=${encodeURIComponent(slug)}`, true);\n\t\t});\n\t};\n\n\tconst onEditorInput = (code) => {\n\t\tsetEditorCode(code);\n\n\t\t// Clears the (now outdated) example & code query params\n\t\t// when a user begins to modify the code\n\t\tif (location.search) {\n\t\t\troute('/repl', true);\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tconst delay = setTimeout(() => {\n\t\t\tsetRunnerCode(editorCode);\n\t\t}, 250);\n\t\treturn () => clearTimeout(delay);\n\t}, [editorCode]);\n\n\tconst share = () => {\n\t\t// No reason to share semi-sketchy btoa'd code if there's\n\t\t// a perfectly good example we can use instead\n\t\tif (!query.example) {\n\t\t\t// We use `history.replaceState` here as the code is only relevant on mount.\n\t\t\t// There's no need to notify the router of the change.\n\t\t\thistory.replaceState(null, null, `/repl?code=${encodeURIComponent(textToBase64(editorCode))}`);\n\t\t}\n\n\t\ttry {\n\t\t\tlet input = document.createElement('input');\n\t\t\tinput.style.cssText = 'position:absolute; left:0; top:-999px;';\n\t\t\tinput.value = location.href;\n\t\t\tdocument.body.appendChild(input);\n\t\t\tinput.select();\n\t\t\tdocument.execCommand('copy');\n\t\t\tinput.blur();\n\t\t\tdocument.body.removeChild(input);\n\t\t\tsetCopied(true);\n\t\t\tsetTimeout(() => setCopied(false), 2500);\n\t\t} catch (err) {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.log(err);\n\t\t}\n\t};\n\n\tconst onRealm = realm => {\n\t\trealm.globalThis.githubStars = window.githubStars;\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<header class={style.toolbar}>\n\t\t\t\t<label>\n\t\t\t\t\tExamples:{' '}\n\t\t\t\t\t<select value={query.example || ''} onChange={applyExample}>\n\t\t\t\t\t\t<option value=\"\" disabled>\n\t\t\t\t\t\t\tSelect Example...\n\t\t\t\t\t\t</option>\n\t\t\t\t\t\t{EXAMPLES.map(function item(ex) {\n\t\t\t\t\t\t\tconst selected =\n\t\t\t\t\t\t\t\tex.slug !== undefined && ex.slug === query.example;\n\t\t\t\t\t\t\treturn ex.group ? (\n\t\t\t\t\t\t\t\t<optgroup label={ex.group}>{ex.items.map(item)}</optgroup>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<option selected={selected} value={ex.slug}>\n\t\t\t\t\t\t\t\t\t{ex.name}\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</select>\n\t\t\t\t</label>\n\t\t\t\t<button class={style.share} onClick={share}>\n\t\t\t\t\t{copied ? '🔗 Copied' : 'Share'}\n\t\t\t\t</button>\n\t\t\t</header>\n\t\t\t<div class={style.replWrapper}>\n\t\t\t\t<Splitter\n\t\t\t\t\torientation=\"horizontal\"\n\t\t\t\t\tother={\n\t\t\t\t\t\t<div class={style.output}>\n\t\t\t\t\t\t\t{error && (\n\t\t\t\t\t\t\t\t<ErrorOverlay\n\t\t\t\t\t\t\t\t\tname={error.name}\n\t\t\t\t\t\t\t\t\tmessage={error.message}\n\t\t\t\t\t\t\t\t\tstack={parseStackTrace(error)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t<Runner\n\t\t\t\t\t\t\t\tonRealm={onRealm}\n\t\t\t\t\t\t\t\tonError={setError}\n\t\t\t\t\t\t\t\tonSuccess={() => setError(null)}\n\t\t\t\t\t\t\t\tcss={REPL_CSS}\n\t\t\t\t\t\t\t\tcode={runnerCode}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t}\n\t\t\t\t>\n\t\t\t\t\t<CodeEditor\n\t\t\t\t\t\tclass={style.code}\n\t\t\t\t\t\tvalue={editorCode}\n\t\t\t\t\t\terror={error}\n\t\t\t\t\t\tslug={query.example}\n\t\t\t\t\t\tonInput={onEditorInput}\n\t\t\t\t\t/>\n\t\t\t\t</Splitter>\n\t\t\t</div>\n\t\t</>\n\t);\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/alviiin./Desktop/sem3/research/preact-www/src/components/controllers/repl/runner.jsx",
    "messages": [
      {
        "ruleId": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: This experimental syntax requires enabling one of the following parser plugin(s): \"jsx\", \"flow\", \"typescript\". (206:3)",
        "line": 206,
        "column": 3,
        "nodeType": null
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Component, createRef } from 'preact';\nimport { memoize } from 'decko';\nimport style from './style.module.css';\nimport * as Comlink from 'comlink';\nimport { patchErrorLocation } from './errors';\n\nlet cachedFetcher = memoize(fetch);\nlet cachedFetch = (...args) => cachedFetcher(...args).then(r => r.clone());\n\nconst worker = Comlink.wrap(\n\tnew Worker(new URL('./repl.worker.js', import.meta.url), {\n\t\ttype: 'module'\n\t})\n);\n\nfunction createRoot(doc) {\n\tconst root = doc.createElement('div');\n\troot.id = 'app';\n\tdoc.body.appendChild(root);\n}\n\nexport default class Runner extends Component {\n\tstatic worker = worker;\n\n\tframe = createRef();\n\n\tuserUpdated = false;\n\n\tshouldComponentUpdate() {\n\t\treturn false;\n\t}\n\n\t/** The parent DOM element into which this runner is rendering results. */\n\tget output() {\n\t\treturn this.realm.globalThis.document.body;\n\t}\n\n\tcommitError = error => {\n\t\tif (error && typeof error === 'object') {\n\t\t\tpatchErrorLocation(error);\n\t\t}\n\t\tthis.didError = true;\n\t\tif (this.props.onError) {\n\t\t\tthis.props.onError(error);\n\t\t}\n\t};\n\n\tcommitResult = result => {\n\t\tthis.didError = false;\n\t\tif (this.props.onSuccess) {\n\t\t\tthis.props.onSuccess(result);\n\t\t}\n\t};\n\n\tcomponentDidMount() {\n\t\t// Set up the realm synchronously so it's available when accessed via a ref.\n\t\t// To do that, we need to reuse then realm on the first run.\n\t\tthis.setupRealm();\n\t\tthis.realm.reuse = true;\n\t\tthis.run();\n\t}\n\n\tcomponentWillReceiveProps({ code, setup }) {\n\t\tif (code !== this.props.code || setup !== this.props.setup) {\n\t\t\tthis.userUpdated = true;\n\t\t\tthis.run();\n\t\t}\n\t}\n\n\trun() {\n\t\tlet { code, setup } = this.props;\n\t\t// onRealm must be called after imports but before user code:\n\t\tconst fullSetup = `if (self._onRealm) self._onRealm();${setup || ''}\\n`;\n\t\tthis.running = worker\n\t\t\t.process(code, fullSetup)\n\t\t\t.then(transpiled => this.execute(transpiled))\n\t\t\t.then(this.commitResult)\n\t\t\t.catch(this.commitError)\n\t\t\t.then(() => {\n\t\t\t\tthis.running = null;\n\t\t\t\tif (this.props.code !== code || this.props.setup !== setup) {\n\t\t\t\t\tthis.run();\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tasync rebuild() {\n\t\tawait new Promise((resolve, reject) => {\n\t\t\tlet frame = this.frame.current;\n\t\t\tframe.onload = resolve;\n\t\t\tframe.onerror = reject;\n\t\t\tframe.src = 'about:blank';\n\t\t});\n\t\treturn await this.setup(true);\n\t}\n\n\tsetup(fresh) {\n\t\tif (this.settingUp && fresh !== true) return this.settingUp;\n\t\tthis.setupRealm();\n\t\t// silly leftover promise stuff\n\t\treturn (this.settingUp = Promise.resolve());\n\t}\n\n\tsetupRealm() {\n\t\tif (this.realm) {\n\t\t\tif (this.realm.reuse) {\n\t\t\t\tthis.realm.reuse = false;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.realm.destroy();\n\t\t}\n\n\t\tthis.realm = new Realm({\n\t\t\tframe: this.frame.current,\n\t\t\tonError: this.commitError\n\t\t});\n\t\tthis.realm.globalThis.fetch = cachedFetch;\n\n\t\tconst insertStyles = () => {\n\t\t\tconst doc = this.realm.globalThis.document,\n\t\t\t\tstyle = doc.createElement('style');\n\t\t\tstyle.appendChild(\n\t\t\t\tdoc.createTextNode(`\n\t\t\t\t\thtml { font: 100%/1.3 system-ui, sans-serif; background: none; }\n\t\t\t\t\t${this.props.css || ''}\n\t\t\t\t`)\n\t\t\t);\n\t\t\tdoc.head.appendChild(style);\n\t\t\tcreateRoot(doc);\n\t\t};\n\n\t\tthis.frame.current.contentDocument.readyState !== 'complete'\n\t\t\t? this.frame.current.onload = insertStyles\n\t\t\t: insertStyles();\n\t}\n\n\tasync execute(transpiled, isFallback) {\n\t\t// TODO: This is much better implemented as a dialog within the frame.\n\t\t// `confirm` unforutnately is a window-level modal, so when/if the\n\t\t// code extends down past the window edge, the user can't see it.\n\t\t//\n\t\t// Using `<dialog>` as a frame-level modal would let the user check the\n\t\t// code in full before running it, though browser support is maybe not\n\t\t// ideal yet.\n\t\tif (\n\t\t\tnew URLSearchParams(location.search).get('code') &&\n\t\t\tdocument.referrer &&\n\t\t\tdocument.referrer.indexOf(location.origin) !== 0 &&\n\t\t\t!this.userUpdated\n\t\t) {\n\t\t\t// eslint-disable-next-line no-alert\n\t\t\tconst confirmed = confirm('Are you sure you want to run the code contained in this link?');\n\t\t\tif (!confirmed) return;\n\t\t}\n\n\t\tif (this.didError && !isFallback) {\n\t\t\tawait this.rebuild();\n\t\t} else {\n\t\t\tawait this.setup();\n\t\t}\n\n\t\tconst base = this.output;\n\t\tconst render = this.realm?.globalThis?.$preact?.render;\n\n\t\tif (this.didError) {\n\t\t\t// no need to reset, this is a fresh frame\n\t\t} else if (render || this.props.clear === true || isFallback === true) {\n\t\t\tif (render) {\n\t\t\t\ttry {\n\t\t\t\t\tthis.root = render(null, base);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error('Failed to unmount previous code: ', e);\n\t\t\t\t}\n\t\t\t}\n\t\t\tbase.innerHTML = '';\n\t\t\tcreateRoot(this.realm.globalThis.document);\n\t\t}\n\n\t\tthis.didError = undefined;\n\n\t\tlet module = { exports: {} };\n\n\t\t// inject onRealm so it can be called after imports but before user code:\n\t\tthis.realm.globalThis._onRealm = () => {\n\t\t\tthis.realm.globalThis._onRealm = null;\n\t\t\tif (this.props.onRealm) {\n\t\t\t\tthis.props.onRealm(this.realm);\n\t\t\t}\n\t\t};\n\n\t\tlet fn = await this.realm.eval(transpiled);\n\n\t\ttry {\n\t\t\tfn(module, module.exports);\n\t\t} catch (error) {\n\t\t\t// try once more without DOM reuse:\n\t\t\tif (isFallback !== true) {\n\t\t\t\treturn await this.execute(transpiled, true);\n\t\t\t}\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\trender(props) {\n\t\treturn (\n\t\t\t<iframe\n\t\t\t\tclass={style.runner + ' ' + (props.class || '')}\n\t\t\t\tstyle={props.style}\n\t\t\t\tref={this.frame}\n\t\t\t\ttitle=\"REPL Result\"\n\t\t\t/>\n\t\t);\n\t}\n}\n\nfunction Realm({ frame, onError }) {\n\tif (!frame) {\n\t\tframe = document.createElement('iframe');\n\t\tframe.style.cssText =\n\t\t\t'position:absolute; left:0; top:-999em; width:1px; height:1px; overflow:hidden; border:0;';\n\t\tdocument.body.appendChild(frame);\n\t}\n\tthis.reuse = false;\n\tthis.globalThis = frame.contentWindow;\n\tthis.onError = onError || console.error;\n\n\tconst catchError = (m, fileName, lineNumber, columnNumber, err) => {\n\t\tif (err) return this.onError(err);\n\t\tlet e = new Error(m);\n\t\t// lineNumber -= 5;\n\t\tlet stack = `${m}\\n  repl.js (:${lineNumber}:${columnNumber})`;\n\t\tObject.defineProperty(e, 'fileName', { value: fileName });\n\t\tObject.defineProperty(e, 'lineNumber', { value: lineNumber });\n\t\tObject.defineProperty(e, 'columnNumber', { value: columnNumber });\n\t\tObject.defineProperty(e, 'stack', { value: stack });\n\t\tthis.onError(e);\n\t};\n\tconst catchRejection = e => {\n\t\tthis.onError(e.reason || e);\n\t};\n\tthis.globalThis.onerror = catchError;\n\tthis.globalThis.addEventListener('unhandledrejection', catchRejection);\n\n\tthis.destroy = () => {\n\t\tthis.globalThis.removeEventListener('unhandledrejection', catchRejection);\n\t\tthis.globalThis.onerror = null;\n\t\tthis.globalThis = this.onError = frame = onError = null;\n\t};\n\tthis.eval = code => frame.contentWindow.eval(code);\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/alviiin./Desktop/sem3/research/preact-www/src/components/controllers/repl-page.jsx",
    "messages": [
      {
        "ruleId": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: This experimental syntax requires enabling one of the following parser plugin(s): \"jsx\", \"flow\", \"typescript\". (18:2)",
        "line": 18,
        "column": 2,
        "nodeType": null
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useLocation, useRoute } from 'preact-iso';\nimport { Repl } from './repl';\nimport { base64ToText } from './repl/query-encode.js';\nimport { fetchExample } from './repl/examples';\nimport { useResource } from '../../lib/use-resource';\nimport { useContent } from '../../lib/use-content';\n\nimport style from './repl/style.module.css';\n\nexport default function ReplPage() {\n\tconst { query } = useRoute();\n\n\tuseContent('repl');\n\n\tconst code = useResource(() => getInitialCode(query), [query]);\n\n\treturn (\n\t\t<div class={style.repl}>\n\t\t\t<style>{`\n\t\t\t\tmain {\n\t\t\t\t\theight: 100% !important;\n\t\t\t\t\toverflow: hidden !important;\n\t\t\t\t}\n\t\t\t`}</style>\n\t\t\t<Repl code={code} />\n\t\t</div>\n\t);\n}\n\n/**\n * Go down the list of fallbacks to get initial code\n *\n * ?code -> ?example -> localStorage -> simple counter example\n */\nasync function getInitialCode(query) {\n\tconst { route } = useLocation();\n\tlet code;\n\tif (query.code)  {\n\t\tcode = base64ToText(query.code);\n\t} else if (query.example) {\n\t\tcode = await fetchExample(query.example);\n\t\tif (!code) {\n\t\t\troute('/repl', true);\n\t\t}\n\t}\n\n\tif (!code) {\n\t\tif (typeof window !== 'undefined' && localStorage.getItem('preact-www-repl-code')) {\n\t\t\tcode = localStorage.getItem('preact-www-repl-code');\n\t\t} else {\n\t\t\tconst slug = 'counter-hooks';\n\t\t\tif (typeof window !== 'undefined') {\n\t\t\t\troute(`/repl?example=${encodeURIComponent(slug)}`, true);\n\t\t\t}\n\t\t\tcode = await fetchExample(slug);\n\t\t}\n\t}\n\n\treturn code;\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/alviiin./Desktop/sem3/research/preact-www/src/components/controllers/tutorial/contexts.jsx",
    "messages": [
      {
        "ruleId": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: This experimental syntax requires enabling one of the following parser plugin(s): \"jsx\", \"flow\", \"typescript\". (21:2)",
        "line": 21,
        "column": 2,
        "nodeType": null
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { createContext } from 'preact';\nimport { useState } from 'preact/hooks';\n\n/**\n * @typedef SolutionContext\n * @property {boolean} solved\n * @property {(boolean) => void} setSolved\n */\n\n/**\n * @type {import('preact').Context<SolutionContext>}\n */\nexport const SolutionContext = createContext(\n\t/** @type {SolutionContext} */ ({})\n);\n\nexport function SolutionProvider({ children }) {\n\tconst [solved, setSolved] = useState(false);\n\n\treturn (\n\t\t<SolutionContext.Provider value={{ solved, setSolved }}>\n\t\t\t{children}\n\t\t</SolutionContext.Provider>\n\t);\n}\n\nexport const TutorialContext = createContext(null);\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/alviiin./Desktop/sem3/research/preact-www/src/components/controllers/tutorial/index.jsx",
    "messages": [
      {
        "ruleId": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: This experimental syntax requires enabling one of the following parser plugin(s): \"jsx\", \"flow\", \"typescript\". (145:2)",
        "line": 145,
        "column": 2,
        "nodeType": null
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { options } from 'preact';\nimport {\n\tuseState,\n\tuseReducer,\n\tuseEffect,\n\tuseContext,\n\tuseRef,\n\tuseMemo,\n\tuseCallback\n} from 'preact/hooks';\nimport { useLocation } from 'preact-iso';\nimport { TutorialContext, SolutionContext } from './contexts';\nimport { ErrorOverlay } from '../repl/error-overlay';\nimport { parseStackTrace } from '../repl/errors';\nimport cx from '../../../lib/cx';\nimport { useResource } from '../../../lib/use-resource';\nimport { useLanguage } from '../../../lib/i18n';\nimport { Splitter } from '../../splitter';\nimport config from '../../../config.json';\nimport { MarkdownRegion } from '../markdown-region';\nimport style from './style.module.css';\n\nconst resultHandlers = new Set();\nconst realmHandlers = new Set();\nconst errorHandlers = new Set();\n\nlet resultCleanups, realmCleanups;\n\n/**\n * @typedef TutorialCode\n * @property {string} setup\n * @property {string} initial\n * @property {string} final\n */\n\n/**\n * @typedef TutorialMeta\n * @property {boolean} [code]\n * @property {boolean} [solvable]\n * @property {TutorialCode} [tutorial]\n */\n\n/**\n * @param {{ html: string, meta: TutorialMeta }} props\n */\nexport function Tutorial({ html, meta }) {\n\tconst { route, url } = useLocation();\n\tconst [editorCode, setEditorCode] = useState(meta.tutorial?.initial || '');\n\tconst [runnerCode, setRunnerCode] = useState(editorCode);\n\tconst [error, setError] = useState(null);\n\tconst [showCodeOverride, toggleCode] = useReducer(s => !s, true);\n\n\tconst content = useRef(null);\n\tconst runner = useRef(null);\n\n\tconst solutionCtx = useContext(SolutionContext);\n\n\tconst hasCode = meta.code !== false;\n\tconst showCode = showCodeOverride && hasCode;\n\n\t// TODO: Needs some work for prerendering to not cause pop-in\n\tif (typeof window === 'undefined') return null;\n\n\t/**\n\t * @type {{ Runner: import('../repl/runner').default, CodeEditor: import('../../code-editor').default }}\n\t */\n\tconst { Runner, CodeEditor } = useResource(() => Promise.all([\n\t\timport('../../code-editor'),\n\t\timport('../repl/runner')\n\t]).then(([CodeEditor, Runner]) => ({ CodeEditor: CodeEditor.default, Runner: Runner.default })), ['repl']);\n\n\tuseEffect(() => {\n\t\tif (meta.tutorial?.initial && editorCode !== meta.tutorial.initial) {\n\t\t\tsetEditorCode(meta.tutorial.initial);\n\t\t\tsetRunnerCode(meta.tutorial.initial);\n\t\t\tsolutionCtx.setSolved(false);\n\t\t\tcontent.current.scrollTo(0, 0);\n\t\t}\n\t}, [meta.tutorial?.initial]);\n\n\tuseEffect(() => {\n\t\tconst delay = setTimeout(() => {\n\t\t\tsetRunnerCode(editorCode);\n\t\t}, 250);\n\t\treturn () => clearTimeout(delay);\n\t}, [editorCode]);\n\n\n\tconst useResult = fn => {\n\t\tuseEffect(() => {\n\t\t\tresultHandlers.add(fn);\n\t\t\treturn () => resultHandlers.delete(fn);\n\t\t}, [fn]);\n\t};\n\tconst useRealm = fn => {\n\t\tuseEffect(() => {\n\t\t\trealmHandlers.add(fn);\n\t\t\tlet r = runner.current;\n\t\t\tif (r && r.realm && r.realm.globalThis._require) {\n\t\t\t\tonRealm(r.realm);\n\t\t\t}\n\t\t\treturn () => realmHandlers.delete(fn);\n\t\t}, [fn]);\n\t};\n\tconst useError = fn => {\n\t\tuseEffect(() => {\n\t\t\terrorHandlers.add(fn);\n\t\t\treturn () => errorHandlers.delete(fn);\n\t\t}, [fn]);\n\t};\n\n\tconst onError = error => {\n\t\terrorHandlers.forEach(f => f(error));\n\t\tsetError(error);\n\t};\n\n\tconst onSuccess = () => {\n\t\tif (resultCleanups) resultCleanups.forEach(f => f());\n\t\tresultCleanups = [];\n\t\tresultHandlers.forEach(f => {\n\t\t\tlet cleanup = f(runner.current);\n\t\t\tif (cleanup) resultCleanups.push(cleanup);\n\t\t});\n\t\tsetError(null);\n\t};\n\n\tconst onRealm = realm => {\n\t\tif (realmCleanups) realmCleanups.forEach(f => f());\n\t\trealmCleanups = [];\n\t\t// this.realmCleanups = Array.from(this.realmHandlers).map(f => f()).filter(Boolean);\n\t\trealmHandlers.forEach(f => {\n\t\t\tlet cleanup = f(realm);\n\t\t\tif (cleanup) realmCleanups.push(cleanup);\n\t\t});\n\t};\n\n\tconst help = () => {\n\t\tif (meta.tutorial?.final) {\n\t\t\troute(`${url}?solved`, true);\n\t\t\tsetEditorCode(meta.tutorial?.final);\n\t\t}\n\t};\n\n\treturn (\n\t\t<TutorialContext.Provider value={this}>\n\t\t\t<div\n\t\t\t\tclass={cx(\n\t\t\t\t\tstyle.tutorialWrapper,\n\t\t\t\t\tmeta.solvable && style.solvable,\n\t\t\t\t\tsolutionCtx.solved && style.solved,\n\t\t\t\t\tshowCode && style.showCode\n\t\t\t\t)}\n\t\t\t>\n\t\t\t\t<Splitter\n\t\t\t\t\torientation=\"horizontal\"\n\t\t\t\t\tforce={!showCode ? '100%' : undefined}\n\t\t\t\t\tother={\n\t\t\t\t\t\t<Splitter\n\t\t\t\t\t\t\torientation=\"vertical\"\n\t\t\t\t\t\t\tother={\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<div class={style.output}>\n\t\t\t\t\t\t\t\t\t\t{error && (\n\t\t\t\t\t\t\t\t\t\t\t<ErrorOverlay\n\t\t\t\t\t\t\t\t\t\t\t\tname={error.name}\n\t\t\t\t\t\t\t\t\t\t\t\tmessage={error.message}\n\t\t\t\t\t\t\t\t\t\t\t\tstack={parseStackTrace(error)}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t<Runner\n\t\t\t\t\t\t\t\t\t\t\tref={runner}\n\t\t\t\t\t\t\t\t\t\t\tonSuccess={onSuccess}\n\t\t\t\t\t\t\t\t\t\t\tonRealm={onRealm}\n\t\t\t\t\t\t\t\t\t\t\tonError={onError}\n\t\t\t\t\t\t\t\t\t\t\tcode={runnerCode}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t{hasCode && (\n\t\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\t\tclass={style.toggleCode}\n\t\t\t\t\t\t\t\t\t\t\ttitle=\"Toggle Code\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={toggleCode}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<span>Toggle Code</span>\n\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div class={style.codeWindow}>\n\t\t\t\t\t\t\t\t<CodeEditor\n\t\t\t\t\t\t\t\t\tclass={style.code}\n\t\t\t\t\t\t\t\t\tvalue={editorCode}\n\t\t\t\t\t\t\t\t\terror={error}\n\t\t\t\t\t\t\t\t\tslug={url}\n\t\t\t\t\t\t\t\t\tonInput={setEditorCode}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Splitter>\n\t\t\t\t\t}\n\t\t\t\t>\n\t\t\t\t\t<div class={style.tutorialWindow} ref={content}>\n\t\t\t\t\t\t<MarkdownRegion\n\t\t\t\t\t\t\thtml={html}\n\t\t\t\t\t\t\tmeta={meta}\n\t\t\t\t\t\t\tcomponents={TUTORIAL_COMPONENTS}\n\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t{meta.tutorial?.setup &&\n\t\t\t\t\t\t\t<TutorialSetupBlock\n\t\t\t\t\t\t\t\tcode={meta.tutorial.setup}\n\t\t\t\t\t\t\t\trunner={runner}\n\t\t\t\t\t\t\t\tuseResult={useResult}\n\t\t\t\t\t\t\t\tuseRealm={useRealm}\n\t\t\t\t\t\t\t\tuseError={useError}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t<ButtonContainer meta={meta} showCode={showCode} help={help} />\n\t\t\t\t\t</div>\n\t\t\t\t</Splitter>\n\t\t\t</div>\n\t\t</TutorialContext.Provider>\n\t);\n}\n\nfunction ButtonContainer({ meta, showCode, help }) {\n\tconst [lang] = useLanguage();\n\n\treturn (\n\t\t<div class={style.buttonContainer}>\n\t\t\t{meta.prev && (\n\t\t\t\t<a class={style.prevButton} href={meta.prev}>\n\t\t\t\t\t{config.i18n.previous[lang] || config.i18n.previous.en}\n\t\t\t\t</a>\n\t\t\t)}\n\t\t\t{meta.solvable && (\n\t\t\t\t<button\n\t\t\t\t\tclass={style.helpButton}\n\t\t\t\t\tonClick={help}\n\t\t\t\t\tdisabled={!showCode}\n\t\t\t\t\ttitle=\"Show solution to this example\"\n\t\t\t\t>\n\t\t\t\t\t{config.i18n.tutorial.solve[lang] ||\n\t\t\t\t\t\tconfig.i18n.tutorial.solve.en}\n\t\t\t\t</button>\n\t\t\t)}\n\t\t\t{meta.next && (\n\t\t\t\t<a class={style.nextButton} href={meta.next}>\n\t\t\t\t\t{meta.nextText || config.i18n.next[lang] || config.i18n.next.en}\n\t\t\t\t</a>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\n/** Handles running ```js:setup code blocks */\nfunction TutorialSetupBlock({ code, runner, useResult, useRealm, useError }) {\n\t// Only run when we get new setup code.\n\t// Note: we run setup code as a component to allow hook usage:\n\tconst Setup = useCallback(() => {\n\t\tif (typeof window === 'undefined') return null;\n\n\t\tconst tutorial = useContext(TutorialContext);\n\t\tconst solutionCtx = useContext(SolutionContext);\n\t\tconst require = m => runner.current.realm.globalThis._require(m);\n\n\t\tconst fn = new Function(\n\t\t\t'options',\n\t\t\t'state',\n\t\t\t'setState',\n\t\t\t'useState',\n\t\t\t'useEffect',\n\t\t\t'useRef',\n\t\t\t'useMemo',\n\t\t\t'useResult',\n\t\t\t'useRealm',\n\t\t\t'useError',\n\t\t\t'solutionCtx',\n\t\t\t'realm',\n\t\t\t'require',\n\t\t\tcode\n\t\t);\n\n\t\tfn(\n\t\t\toptions,\n\t\t\ttutorial.state,\n\t\t\ttutorial.setState.bind(tutorial),\n\t\t\tuseState,\n\t\t\tuseEffect,\n\t\t\tuseRef,\n\t\t\tuseMemo,\n\t\t\tuseResult,\n\t\t\tuseRealm,\n\t\t\tuseError,\n\t\t\tsolutionCtx,\n\t\t\trunner.current && runner.current.realm,\n\t\t\trequire\n\t\t);\n\n\t\treturn null;\n\t}, [code]);\n\n\treturn <Setup />;\n}\n\nconst TUTORIAL_COMPONENTS = {\n\tSolution\n};\n\n/** Shows a solution banner when the chapter is solved */\nfunction Solution({ children }) {\n\tconst { solved } = useContext(SolutionContext);\n\tconst ref = useRef(null);\n\n\tuseEffect(() => {\n\t\tif (solved) {\n\t\t\trequestAnimationFrame(() => {\n\t\t\t\tref.current && ref.current.scrollIntoView({ behavior: 'smooth' });\n\t\t\t});\n\t\t}\n\t}, [solved]);\n\n\tif (!solved) return null;\n\n\treturn (\n\t\t<div ref={ref} class={style.solution}>\n\t\t\t{children}\n\t\t</div>\n\t);\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/alviiin./Desktop/sem3/research/preact-www/src/components/controllers/tutorial-page.jsx",
    "messages": [
      {
        "ruleId": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: This experimental syntax requires enabling one of the following parser plugin(s): \"jsx\", \"flow\", \"typescript\". (17:9)",
        "line": 17,
        "column": 9,
        "nodeType": null
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useRoute } from 'preact-iso';\nimport { useEffect } from 'preact/hooks';\nimport { Tutorial } from './tutorial';\nimport { SolutionProvider } from './tutorial/contexts';\nimport { NotFound } from './not-found';\nimport { useContent } from '../../lib/use-content';\nimport { prefetchContent } from '../../lib/use-resource.js';\nimport { tutorialRoutes } from '../../lib/route-utils';\n\nimport style from './tutorial/style.module.css';\n\nexport default function TutorialPage() {\n\tconst { params } = useRoute();\n\tconst { step } = params;\n\n\tif (!tutorialRoutes[`/tutorial${step ? `/${step}` : ''}`]) {\n\t\treturn <NotFound />;\n\t}\n\n\treturn <TutorialLayout />;\n}\n\nfunction TutorialLayout() {\n\tconst { path, params } = useRoute();\n\tconst { html, meta } = useContent(!params.step ? 'tutorial/index' : path);\n\n\t// Preload the next chapter\n\tuseEffect(() => {\n\t\tif (meta && meta.next) {\n\t\t\tprefetchContent(meta.next);\n\t\t}\n\t}, [meta.next, path]);\n\n\treturn (\n\t\t<div class={style.tutorial}>\n\t\t\t<style>{`\n\t\t\t\tmain {\n\t\t\t\t\theight: 100% !important;\n\t\t\t\t\toverflow: hidden !important;\n\t\t\t\t}\n\t\t\t`}</style>\n\t\t\t<SolutionProvider>\n\t\t\t\t<Tutorial html={html} meta={meta} />\n\t\t\t</SolutionProvider>\n\t\t</div>\n\t);\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/alviiin./Desktop/sem3/research/preact-www/src/components/doc-version/index.jsx",
    "messages": [
      {
        "ruleId": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: This experimental syntax requires enabling one of the following parser plugin(s): \"jsx\", \"flow\", \"typescript\". (29:2)",
        "line": 29,
        "column": 2,
        "nodeType": null
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useCallback } from 'preact/hooks';\nimport { useLocation, useRoute } from 'preact-iso';\nimport config from '../../config.json';\nimport style from './style.module.css';\n\nexport const LATEST_MAJOR = 'v10';\nexport const AVAILABLE_DOCS = ['10', '8'];\n\n/**\n * Select box to switch the currently displayed docs version\n */\nexport default function DocVersion() {\n\tconst { route } = useLocation();\n\tconst { params, path } = useRoute();\n\tconst { version, name } = params;\n\n\tconst onChange = useCallback(\n\t\te => {\n\t\t\tconst version = e.currentTarget.value;\n\t\t\tconst url = config.docs[version]?.[name]\n\t\t\t\t? path.replace(/(v\\d{1,2})/, version)\n\t\t\t\t: `/guide/${version}/getting-started`;\n\t\t\troute(url);\n\t\t},\n\t\t[path, route]\n\t);\n\n\treturn (\n\t\t<label class={style.root}>\n\t\t\tVersion:{' '}\n\t\t\t<select value={version} class={style.select} onChange={onChange}>\n\t\t\t\t{AVAILABLE_DOCS.map(v => {\n\t\t\t\t\tconst suffix = LATEST_MAJOR.slice(1) == v ? ' (current)' : '';\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<option key={v} value={`v${v}`}>\n\t\t\t\t\t\t\t{v}.x{suffix}\n\t\t\t\t\t\t</option>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</select>\n\t\t</label>\n\t);\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/alviiin./Desktop/sem3/research/preact-www/src/components/edit-button/index.jsx",
    "messages": [
      {
        "ruleId": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: This experimental syntax requires enabling one of the following parser plugin(s): \"jsx\", \"flow\", \"typescript\". (12:2)",
        "line": 12,
        "column": 2,
        "nodeType": null
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useRoute } from 'preact-iso';\nimport { useLanguage } from '../../lib/i18n';\nimport style from './style.module.css';\n\nexport default function EditThisPage({ isFallback }) {\n\tlet { path } = useRoute();\n\tconst [lang] = useLanguage();\n\n\tpath = !isFallback ? path + '.md' : '';\n\tconst editUrl = `https://github.com/preactjs/preact-www/tree/master/content/${lang}${path}`;\n\treturn (\n\t\t<div class={style.wrapper}>\n\t\t\t{!isFallback ? (\n\t\t\t\t<a\n\t\t\t\t\tclass={style.edit}\n\t\t\t\t\thref={editUrl}\n\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\trel=\"noopener noreferrer\"\n\t\t\t\t>\n\t\t\t\t\tEdit this Page\n\t\t\t\t</a>\n\t\t\t) : (\n\t\t\t\t<div class={style.fallback}>\n\t\t\t\t\t<div class={style.fallbackInner}>\n\t\t\t\t\t\tCould not find a translation for this page. You can help us out by{' '}\n\t\t\t\t\t\t<a href={editUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n\t\t\t\t\t\t\tadding one here\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t.\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/alviiin./Desktop/sem3/research/preact-www/src/components/footer/index.jsx",
    "messages": [
      {
        "ruleId": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: This experimental syntax requires enabling one of the following parser plugin(s): \"jsx\", \"flow\", \"typescript\". (42:2)",
        "line": 42,
        "column": 2,
        "nodeType": null
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useCallback } from 'preact/hooks';\nimport config from '../../config.json';\nimport { useLanguage } from '../../lib/i18n';\nimport { useResource } from '../../lib/use-resource';\nimport style from './style.module.css';\n\n/*\n * To update the list, run:\n *\n * const api = u => fetch(`https://api.github.com${u}`).then(r=>r.json());\n * async function getContribs(org, repo, page=1) {\n *   let c = (await api(`/repos/${org}/${repo}/contributors?per_page=100&page=${page}`)).filter(u => u.contributions>1).map(u => u.login);\n *   if (c.length===100) c = c.concat(await getContribs(org, repo, page+1));\n *   return c;\n * }\n * const repos = await api('/orgs/preactjs/repos?per_page=100');\n * const list = new Set((await Promise.all(repos.map(r => getContribs(r.owner.login, r.name)))).flat().filter(n => !n.endsWith('-bot') && !n.endsWith('[bot]')));\n * copy(JSON.stringify([...list], null, 2));\n *\n * And paste the results into src/assets/contributors.json\n */\n\n/**\n * Display a random contributor of the list above.\n */\nfunction useContributors() {\n\tconst contributors = useResource(() =>\n\t\tfetch('/contributors.json').then(r => r.json()),\n\t\t['/contributors.json']\n\t);\n\n\treturn contributors[(Math.random() * (contributors.length - 1)) | 0];\n}\n\nexport default function Footer() {\n\tconst contrib = useContributors();\n\tconst [lang, setLang] = useLanguage();\n\n\tconst onSelect = useCallback(e => setLang(e.target.value), [setLang]);\n\n\treturn (\n\t\t<footer class={style.footer}>\n\t\t\t<div class={style.inner}>\n\t\t\t\t<p>\n\t\t\t\t\t<label class={style.lang}>\n\t\t\t\t\t\tLanguage:{' '}\n\t\t\t\t\t\t<select value={lang || 'en'} onInput={onSelect}>\n\t\t\t\t\t\t\t{Object.keys(config.languages).map(id => (\n\t\t\t\t\t\t\t\t<option selected={id == lang} value={id}>\n\t\t\t\t\t\t\t\t\t{config.languages[id]}\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</select>\n\t\t\t\t\t\t{lang && <code>?lang={lang}</code>}\n\t\t\t\t\t</label>\n\t\t\t\t</p>\n\t\t\t\t<p style=\"line-height: 1\">\n\t\t\t\t\tBuilt by a bunch of{' '}\n\t\t\t\t\t<a\n\t\t\t\t\t\thref=\"https://github.com/preactjs/preact/graphs/contributors\"\n\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\trel=\"noopener noreferrer\"\n\t\t\t\t\t>\n\t\t\t\t\t\tlovely people\n\t\t\t\t\t</a>{' '}\n\t\t\t\t\t{contrib && [\n\t\t\t\t\t\t' like ',\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\thref={'https://github.com/' + contrib}\n\t\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\t\trel=\"noopener noreferrer\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t@{contrib}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t]}\n\t\t\t\t\t.\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t</footer>\n\t);\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/alviiin./Desktop/sem3/research/preact-www/src/components/github-stars.jsx",
    "messages": [
      {
        "ruleId": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: This experimental syntax requires enabling one of the following parser plugin(s): \"jsx\", \"flow\", \"typescript\". (24:3)",
        "line": 24,
        "column": 3,
        "nodeType": null
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useEffect, useState } from 'preact/hooks';\nimport { repoInfo } from '../lib/github';\nimport { usePrerenderData } from '../lib/prerender-data.jsx';\n\nconst githubStars = repo =>\n\trepoInfo(repo).then(d => d.stargazers_count);\n\nconst formatNumber = num => (num + '').replace(/(\\d{3})$/g, ',$1');\n\n// make available to homepage REPL demo\nif (typeof window !== 'undefined') window.githubStars = githubStars;\n\nexport default function GitHubStars({ user, repo, simple, children }) {\n\tconst { preactStargazers } = usePrerenderData();\n\tconst [stars, setStars] = useState(preactStargazers);\n\n\tuseEffect(() => {\n\t\tgithubStars(`${user}/${repo}`).then(setStars);\n\t}, []);\n\n\tconst url = `https://github.com/${user}/${repo}/`;\n\tif (simple) {\n\t\treturn (\n\t\t\t<a href={url} class=\"stars\" target=\"_blank\" rel=\"noopener noreferrer\">\n\t\t\t\t⭐️ {stars} Stars\n\t\t\t</a>\n\t\t);\n\t}\n\n\treturn (\n\t\t<span class=\"github-btn\">\n\t\t\t<a\n\t\t\t\tclass=\"gh-btn\"\n\t\t\t\thref={url}\n\t\t\t\ttarget=\"_blank\"\n\t\t\t\trel=\"noopener noreferrer\"\n\t\t\t\taria-label=\"Star on GitHub\"\n\t\t\t>\n\t\t\t\t<span class=\"gh-ico\" /> Star\n\t\t\t</a>\n\t\t\t<a\n\t\t\t\tclass=\"gh-count\"\n\t\t\t\thref={url}\n\t\t\t\ttarget=\"_blank\"\n\t\t\t\trel=\"noopener noreferrer\"\n\t\t\t>\n\t\t\t\t{stars ? formatNumber(Math.round(stars)) : children || '..'}\n\t\t\t</a>\n\t\t</span>\n\t);\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/alviiin./Desktop/sem3/research/preact-www/src/components/header/corner.jsx",
    "messages": [
      {
        "ruleId": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: This experimental syntax requires enabling one of the following parser plugin(s): \"jsx\", \"flow\", \"typescript\". (5:2)",
        "line": 5,
        "column": 2,
        "nodeType": null
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import style from './corner.module.css';\n\nexport default function Corner() {\n\treturn (\n\t\t<a\n\t\t\thref=\"https://opencollective.com/preact\"\n\t\t\ttarget=\"_blank\"\n\t\t\trel=\"noopener noreferrer\"\n\t\t\tclass={style.corner}\n\t\t>\n\t\t\t<div class={style.cornerText}>\n\t\t\t\tHelp\n\t\t\t\t<br />\n\t\t\t\tSupport Us\n\t\t\t</div>\n\t\t</a>\n\t);\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/alviiin./Desktop/sem3/research/preact-www/src/components/header/gh-version.jsx",
    "messages": [
      {
        "ruleId": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: This experimental syntax requires enabling one of the following parser plugin(s): \"jsx\", \"flow\", \"typescript\". (20:2)",
        "line": 20,
        "column": 2,
        "nodeType": null
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useEffect, useState } from 'preact/hooks';\nimport { fetchRelease } from '../../lib/github';\nimport { usePrerenderData } from '../../lib/prerender-data.jsx';\nimport config from '../../config.json';\n\nexport default function ReleaseLink({ ...props }) {\n\tconst { preactReleaseURL, preactVersion } = usePrerenderData();\n\tconst [release, setRelease] = useState({\n\t\turl: preactReleaseURL,\n\t\tversion: preactVersion\n\t});\n\n\tuseEffect(() => {\n\t\tfetchRelease(config.repo).then(d => {\n\t\t\tsetRelease(d);\n\t\t});\n\t}, []);\n\n\treturn (\n\t\t<a href={release.url} {...props}>\n\t\t\tv{release.version}\n\t\t</a>\n\t);\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/alviiin./Desktop/sem3/research/preact-www/src/components/header/index.jsx",
    "messages": [
      {
        "ruleId": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: This experimental syntax requires enabling one of the following parser plugin(s): \"jsx\", \"flow\", \"typescript\". (29:2)",
        "line": 29,
        "column": 2,
        "nodeType": null
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Component } from 'preact';\nimport cx from '../../lib/cx';\nimport { InvertedLogo } from '../logo';\nimport Search from './search';\nimport style from './style.module.css';\nimport config from '../../config.json';\nimport { useCallback, useEffect } from 'preact/hooks';\nimport ReleaseLink from './gh-version';\nimport Corner from './corner';\nimport { useOverlayToggle } from '../../lib/toggle-overlay';\nimport { useLocation } from 'preact-iso';\nimport { useLanguage } from '../../lib/i18n';\nimport { prefetchContent } from '../../lib/use-resource';\n\nconst LINK_FLAIR = {\n\tlogo: InvertedLogo\n};\n\nexport default function Header() {\n\tconst { url } = useLocation();\n\tconst [open, setOpen] = useOverlayToggle();\n\tconst toggle = useCallback(() => setOpen(!open), [open]);\n\n\tuseEffect(() => {\n\t\tif (open) setOpen(false);\n\t}, [url]);\n\n\treturn (\n\t\t<header class={cx(style.header, open && style.open)}>\n\t\t\t<div class={style.banner}>\n\t\t\t\t<a href=\"https://www.stopputin.net/\">\n\t\t\t\t\tWe stand with Ukraine. <b>Show your support</b> 🇺🇦\n\t\t\t\t</a>\n\t\t\t</div>\n\t\t\t<div class={style.outer}>\n\t\t\t\t<div class={style.inner}>\n\t\t\t\t\t<Nav class={style.nav} routes={config.nav} current={url} />\n\t\t\t\t\t<Search />\n\t\t\t\t\t<div class={style.social}>\n\t\t\t\t\t\t<ReleaseLink class={cx(style.socialItem, style.release)} />\n\t\t\t\t\t\t<SocialIcon\n\t\t\t\t\t\t\tlabel=\"Browse the code on GitHub\"\n\t\t\t\t\t\t\thref=\"https://github.com/preactjs/preact\"\n\t\t\t\t\t\t\tviewbox=\"0 0 24 24\"\n\t\t\t\t\t\t\tid=\"github\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<SocialIcon\n\t\t\t\t\t\t\tlabel=\"Follow us on Twitter\"\n\t\t\t\t\t\t\thref=\"https://twitter.com/preactjs\"\n\t\t\t\t\t\t\tviewbox=\"0 0 34 27.646\"\n\t\t\t\t\t\t\tid=\"twitter\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<SocialIcon\n\t\t\t\t\t\t\tlabel=\"Follow us on Bluesky\"\n\t\t\t\t\t\t\thref=\"https://bsky.app/profile/preactjs.com\"\n\t\t\t\t\t\t\tviewbox=\"0 0 568 501\"\n\t\t\t\t\t\t\tid=\"bluesky\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<SocialIcon\n\t\t\t\t\t\t\tlabel=\"Chat with us on Slack\"\n\t\t\t\t\t\t\thref=\"http://chat.preactjs.com/\"\n\t\t\t\t\t\t\tviewbox=\"0 0 512 512\"\n\t\t\t\t\t\t\tid=\"slack\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class={style.translation}>\n\t\t\t\t\t\t<NavMenu language />\n\t\t\t\t\t</div>\n\t\t\t\t\t<HamburgerMenu open={open} onClick={toggle} />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<Corner />\n\t\t</header>\n\t);\n}\n\nconst SocialIcon = ({ label, href, viewbox, id }) => (\n\t<a\n\t\tclass={style.socialItem}\n\t\taria-label={label}\n\t\thref={href}\n\t\ttarget=\"_blank\"\n\t\trel=\"noopener noreferrer\"\n\t>\n\t\t<svg aria-hidden viewBox={viewbox}>\n\t\t\t<use href={`/icons.svg#${id}`} />\n\t\t</svg>\n\t</a>\n);\n\nconst HamburgerMenu = ({ open, ...props }) => (\n\t<div class={style.hamburger} open={open} {...props}>\n\t\t<div class={style.hb1} />\n\t\t<div class={style.hb2} />\n\t\t<div class={style.hb3} />\n\t</div>\n);\n\n// nested nav renderer\nconst Nav = ({ routes, current, ...props }) => (\n\t<nav {...props}>\n\t\t{routes.map(route =>\n\t\t\troute.routes ? (\n\t\t\t\t<NavMenu\n\t\t\t\t\tto={route}\n\t\t\t\t\tcurrent={current}\n\t\t\t\t\tdata-route={getRouteIdent(route)}\n\t\t\t\t/>\n\t\t\t) : (\n\t\t\t\t<NavLink\n\t\t\t\t\tto={route}\n\t\t\t\t\tclass={cx(\n\t\t\t\t\t\troute.class,\n\t\t\t\t\t\t(pathMatchesRoute(current, route) ||\n\t\t\t\t\t\t\t(route.content === 'guide' && /^\\/guide\\//.test(current)) ||\n\t\t\t\t\t\t\t(route.content === 'blog' && /^\\/blog\\//.test(current))) &&\n\t\t\t\t\t\t\tstyle.current\n\t\t\t\t\t)}\n\t\t\t\t/>\n\t\t\t)\n\t\t)}\n\t</nav>\n);\n\n// nav items are really the only complex bit for menuing, since they handle click events.\nclass NavMenu extends Component {\n\tstate = { open: false };\n\n\tclose = () => (this.setState({ open: false }), false);\n\n\ttoggle = () => (this.setState({ open: !this.state.open }), false);\n\n\thandleClickOutside = ({ target }) => {\n\t\tif (this.state.open) {\n\t\t\tdo {\n\t\t\t\tif (target === this.base) return;\n\t\t\t} while ((target = target.parentNode));\n\t\t\tthis.close();\n\t\t}\n\t};\n\n\tcomponentDidMount() {\n\t\taddEventListener('click', this.handleClickOutside);\n\t}\n\n\tcomponentWillUnmount() {\n\t\tremoveEventListener('click', this.handleClickOutside);\n\t}\n\n\tcomponentDidUpdate({ current }) {\n\t\tif (current !== this.props.current && this.state.open) {\n\t\t\tthis.close();\n\t\t}\n\t}\n\n\trender({ to, current, language, ...props }, { open }) {\n\t\treturn (\n\t\t\t<div {...props} data-open={open} class={style.navGroup}>\n\t\t\t\t{language ? (\n\t\t\t\t\t<LanguageSelectorMenu\n\t\t\t\t\t\tisOpen={open}\n\t\t\t\t\t\ttoggle={this.toggle}\n\t\t\t\t\t\tclose={this.close}\n\t\t\t\t\t\t{...props}\n\t\t\t\t\t/>\n\t\t\t\t) : (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<NavLink\n\t\t\t\t\t\t\tto={to}\n\t\t\t\t\t\t\tonClick={this.toggle}\n\t\t\t\t\t\t\taria-haspopup\n\t\t\t\t\t\t\tisOpen={open}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Nav\n\t\t\t\t\t\t\troutes={to.routes}\n\t\t\t\t\t\t\tcurrent={current}\n\t\t\t\t\t\t\taria-label=\"submenu\"\n\t\t\t\t\t\t\taria-hidden={'' + !open}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n// depending on the type of nav link, use <a>\nconst NavLink = ({ to, isOpen, route, ...props }) => {\n\tconst location = useLocation();\n\tconst [lang] = useLanguage();\n\tlet Flair = to.flair && LINK_FLAIR[to.flair];\n\n\tif (to.skipHeader) return;\n\n\tif (!to.path) {\n\t\treturn (\n\t\t\t<button\n\t\t\t\t{...props}\n\t\t\t\taria-haspopup=\"true\"\n\t\t\t\taria-expanded={isOpen}\n\t\t\t\tdata-route={route}\n\t\t\t>\n\t\t\t\t{getRouteName(to, lang)}\n\t\t\t</button>\n\t\t);\n\t}\n\n\tfunction BrandingRedirect(e) {\n\t\te.preventDefault();\n\t\tlocation.route('/branding');\n\t}\n\n\tconst href = to.href || to.path;\n\tconst prefetchHref = href == '/tutorial'\n\t\t? '/tutorial/index'\n\t\t: href == '/'\n\t\t\t? '/index'\n\t\t\t: href;\n\tconst homeProps = to.href == '/' || to.path == '/'\n\t\t? { onContextMenu: BrandingRedirect, 'aria-label': 'Home' }\n\t\t: {};\n\n\treturn (\n\t\t<a\n\t\t\thref={href}\n\t\t\tonMouseOver={() => prefetchContent(prefetchHref)}\n\t\t\t{...props}\n\t\t\tdata-route={route}\n\t\t\t{...homeProps}\n\t\t>\n\t\t\t{Flair && <Flair title=\"Preact Logo\" />}\n\t\t\t{getRouteName(to, lang)}\n\t\t</a>\n\t);\n};\n\nconst LanguageSelectorMenu = ({ isOpen, toggle, close, ...props }) => {\n\tconst [lang, setLang] = useLanguage();\n\tconst onClick = useCallback(\n\t\te => {\n\t\t\tsetLang(e.target.dataset.value);\n\t\t\tclose();\n\t\t},\n\t\t[setLang]\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t<button\n\t\t\t\t{...props}\n\t\t\t\tonClick={toggle}\n\t\t\t\taria-label=\"Select your language\"\n\t\t\t\taria-haspopup\n\t\t\t\taria-expanded={isOpen}\n\t\t\t>\n\t\t\t\t<svg aria-hidden viewBox=\"0 0 24 24\">\n\t\t\t\t\t<use href=\"/icons.svg#i18n\" />\n\t\t\t\t</svg>\n\t\t\t</button>\n\t\t\t<nav aria-label=\"submenu\" aria-hidden={!isOpen}>\n\t\t\t\t{typeof window !== 'undefined' && Object.keys(config.languages).map(id => (\n\t\t\t\t\t<span\n\t\t\t\t\t\tclass={cx(id == lang && style.current)}\n\t\t\t\t\t\tdata-value={id}\n\t\t\t\t\t\tonClick={onClick}\n\t\t\t\t\t>\n\t\t\t\t\t\t{config.languages[id]}\n\t\t\t\t\t</span>\n\t\t\t\t))}\n\t\t\t</nav>\n\t\t</>\n\t);\n};\n\nexport function getRouteName(route, lang) {\n\treturn typeof route.name === 'object'\n\t\t? route.name[lang] || route.name.en\n\t\t: route.name || route.title;\n}\n\nfunction pathMatchesRoute(path, route) {\n\tif (!route || !route.path) return false;\n\tif (path === route.path) return true;\n\tlet segs = path.replace(/(^\\/|\\/$)/g, '').split('/');\n\tlet psegs = route.path.replace(/(^\\/|\\/$)/g, '').split('/');\n\tlet len = Math.max(psegs.length, segs.length);\n\tfor (let i = 0; i < len; i++) {\n\t\tlet p = psegs[i];\n\t\tlet s = segs[i];\n\t\tif (!p || (p[0] !== ':' && s !== p)) return false;\n\t\tif (!s) return /[?*]$/g.test(p);\n\t\tif (/[*+]$/g.test(p)) return true;\n\t}\n\treturn true;\n}\n\n// get a CSS-addressable identifier for a given route\nconst getRouteIdent = route =>\n\t(getRouteName(route, 'en') || route.url)\n\t\t.toLowerCase()\n\t\t.replace(/[^a-z0-9]/i, '');\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/alviiin./Desktop/sem3/research/preact-www/src/components/header/search.jsx",
    "messages": [
      {
        "ruleId": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: This experimental syntax requires enabling one of the following parser plugin(s): \"jsx\", \"flow\", \"typescript\". (20:2)",
        "line": 20,
        "column": 2,
        "nodeType": null
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { lazy, ErrorBoundary } from 'preact-iso';\nimport style from './style.module.css';\nimport config from '../../config.json';\n\nconst DocSearch = lazy(() => import('@docsearch/react').then(m => m.DocSearch));\n\n// Might be a problem with the Algolia data, but it seemingly\n// appends `#app` to all URLs without a hash fragment.\n//\n// It also returns the full prod URL, which isn't ideal for dev/staging\nconst transformItems = (items) =>\n\titems.map(i => {\n\t\t\tconst url = new URL(i.url);\n\t\t\treturn Object.assign(i, { url: url.pathname + url.hash.replace(/#app$/, '') });\n\t\t}\n\t);\n\nexport default function Search() {\n\treturn (\n\t\t<div class={style.search}>\n\t\t\t<ErrorBoundary>\n\t\t\t\t<DocSearch\n\t\t\t\t\tapiKey={config.docsearch.apiKey}\n\t\t\t\t\tindexName={config.docsearch.indexName}\n\t\t\t\t\tappId={config.docsearch.appId}\n\t\t\t\t\ttransformItems={transformItems}\n\t\t\t\t/>\n\t\t\t</ErrorBoundary>\n\t\t</div>\n\t);\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/alviiin./Desktop/sem3/research/preact-www/src/components/jumbotron/index.jsx",
    "messages": [
      {
        "ruleId": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: This experimental syntax requires enabling one of the following parser plugin(s): \"jsx\", \"flow\", \"typescript\". (5:1)",
        "line": 5,
        "column": 1,
        "nodeType": null
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import cx from '../../lib/cx';\nimport style from './style.module.css';\n\nconst Jumbotron = ({ children, class: c, ...props }) => (\n\t<header class={cx(style.jumbotron, 'full-width', c)} {...props}>\n\t\t<div class={style.stripes} />\n\t\t<div class={style.content}>{children}</div>\n\t</header>\n);\n\nexport default Jumbotron;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/alviiin./Desktop/sem3/research/preact-www/src/components/logo.jsx",
    "messages": [
      {
        "ruleId": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: This experimental syntax requires enabling one of the following parser plugin(s): \"jsx\", \"flow\", \"typescript\". (52:3)",
        "line": 52,
        "column": 3,
        "nodeType": null
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Component } from 'preact';\nimport { useLocation } from 'preact-iso';\n\nexport default class Logo extends Component {\n\tstate = { i: 0, hover: false };\n\troute = null;\n\n\thover = () => {\n\t\tthis.setState({ hover: true });\n\t};\n\n\thoverOut = () => {\n\t\tthis.setState({ hover: false });\n\t};\n\n\tframe = () => {\n\t\tthis.timer = null;\n\t\tif (!this.mounted) return;\n\t\tthis.setState({ i: this.state.i + 1 }, this.next);\n\t};\n\n\tnext = () => {\n\t\tlet { hover } = this.state;\n\t\tif (!this.mounted || !hover || this.timer) return;\n\t\tthis.timer = (requestAnimationFrame || setTimeout)(this.frame, 15);\n\t};\n\n\tcontextMenu = e => {\n\t\te.preventDefault();\n\t\tthis.route('/branding');\n\t};\n\n\tcomponentDidMount() {\n\t\tthis.mounted = true;\n\t\tthis.startTimer = setTimeout(this.next, 5000);\n\t}\n\n\tcomponentWillUnmount() {\n\t\tclearTimeout(this.startTimer);\n\t\t(cancelAnimationFrame || clearTimeout)(this.timer);\n\t\tthis.mounted = this.timer = false;\n\t}\n\n\tcomponentDidUpdate() {\n\t\tthis.next();\n\t}\n\n\trenderEllipse(fg, deg, offset) {\n\t\tlet gapLength = Math.sin((offset / 500) * Math.PI) * 30 + 60;\n\t\tlet lineLength = 894 / 2 - gapLength;\n\t\treturn (\n\t\t\t<ellipse\n\t\t\t\tcx=\"0\"\n\t\t\t\tcy=\"0\"\n\t\t\t\trx=\"75px\"\n\t\t\t\try=\"196px\"\n\t\t\t\tstroke-width=\"16px\"\n\t\t\t\tstroke-dasharray={`${lineLength} ${gapLength}`}\n\t\t\t\tstroke-dashoffset={\n\t\t\t\t\toffset * 10 + Math.sin((offset / 100) * Math.PI) * 200\n\t\t\t\t}\n\t\t\t\tfill=\"none\"\n\t\t\t\tstroke={fg}\n\t\t\t\ttransform={`rotate(${deg})`}\n\t\t\t/>\n\t\t);\n\t}\n\n\trender(\n\t\t{\n\t\t\tinverted = false,\n\t\t\ttext = false,\n\t\t\tfg = 'white',\n\t\t\tbg = '#673ab8',\n\t\t\tcomponent,\n\t\t\ttitle,\n\t\t\t...props\n\t\t},\n\t\t{ i }\n\t) {\n\t\tif (inverted) [bg, fg] = [fg, bg];\n\t\tthis.route = useLocation().route;\n\n\t\treturn (\n\t\t\t<svg\n\t\t\t\taria-label={title}\n\t\t\t\twidth={!text && '34px'}\n\t\t\t\theight=\"34px\"\n\t\t\t\tviewBox={`-256 -256 ${text ? 1800 : 512} 512`}\n\t\t\t\tstyle=\"display:inline-block; margin:-.25em 0 0; vertical-align:middle;\"\n\t\t\t\tonMouseOver={this.hover}\n\t\t\t\tonMouseOut={this.hoverOut}\n\t\t\t\tonContextMenu={this.contextMenu}\n\t\t\t\t{...props}\n\t\t\t>\n\t\t\t\t<path\n\t\t\t\t\td=\"M0,-256 221.7025033688164,-128 221.7025033688164,128 0,256 -221.7025033688164,128 -221.7025033688164,-128z\"\n\t\t\t\t\tfill={bg}\n\t\t\t\t/>\n\t\t\t\t{this.renderEllipse(fg, 52, i)}\n\t\t\t\t{this.renderEllipse(fg, -52, -0.7 * i)}\n\t\t\t\t<circle cx=\"0\" cy=\"0\" r=\"34\" fill={fg} />\n\t\t\t\t{text && (\n\t\t\t\t\t<path\n\t\t\t\t\t\tfill=\"white\"\n\t\t\t\t\t\td=\"M289.85 25.25L289.85 125L272 125L272-122.63L335.88-122.63Q379.45-122.63 401.59-103.55Q423.73-84.48 423.73-49.13Q423.73-32.85 417.69-19.20Q411.65-5.55 400.27 4.34Q388.90 14.22 372.63 19.74Q356.35 25.25 335.88 25.25L289.85 25.25M289.85 10.90L335.88 10.90Q352.33 10.90 365.27 6.35Q378.23 1.80 387.24-6.25Q396.25-14.30 401.06-25.24Q405.88-36.18 405.88-49.13Q405.88-77.65 388.29-93.05Q370.70-108.45 335.88-108.45L289.85-108.45L289.85 10.90ZM497.58 13.00L497.58 125L479.73 125L479.73-122.63L542.90-122.63Q585.78-122.63 606.95-106.09Q628.13-89.55 628.13-57.53Q628.13-43.35 623.23-31.63Q618.33-19.90 609.14-11.06Q599.95-2.23 587 3.46Q574.05 9.15 557.78 10.90Q561.98 13.52 565.30 17.90L650.53 125L634.95 125Q632.15 125 630.14 123.95Q628.13 122.90 626.20 120.45L546.93 20.00Q543.95 16.15 540.54 14.57Q537.13 13.00 529.95 13.00L497.58 13.00M497.58-0.30L540.63-0.30Q557.08-0.30 570.11-4.24Q583.15-8.18 592.16-15.53Q601.18-22.88 605.90-33.20Q610.63-43.53 610.63-56.48Q610.63-82.90 593.30-95.68Q575.98-108.45 542.90-108.45L497.58-108.45L497.58-0.30ZM843.73-122.63L843.73-107.75L713.35-107.75L713.35-7.65L821.85-7.65L821.85 6.87L713.35 6.87L713.35 110.13L843.73 110.13L843.73 125L695.33 125L695.33-122.63L843.73-122.63ZM1088.55 125L1074.73 125Q1072.28 125 1070.70 123.69Q1069.13 122.38 1068.25 120.28L1039.03 48.35L917.40 48.35L888.35 120.28Q887.65 122.20 885.90 123.60Q884.15 125 881.70 125L868.05 125L969.38-122.63L987.23-122.63L1088.55 125M922.83 35.05L1033.78 35.05L983.20-90.08Q981.98-93.05 980.75-96.81Q979.53-100.58 978.30-104.78Q977.08-100.58 975.85-96.81Q974.63-93.05 973.40-89.90L922.83 35.05ZM1302.40 83.35Q1304.15 83.35 1305.38 84.57L1312.38 92.10Q1304.67 100.33 1295.58 106.89Q1286.47 113.45 1275.71 118.09Q1264.95 122.72 1252.09 125.26Q1239.22 127.80 1223.83 127.80Q1198.10 127.80 1176.66 118.79Q1155.22 109.78 1139.91 93.24Q1124.60 76.70 1116.03 53.25Q1107.45 29.80 1107.45 1.10Q1107.45-27.08 1116.29-50.35Q1125.13-73.63 1141.14-90.34Q1157.15-107.05 1179.46-116.24Q1201.78-125.43 1228.72-125.43Q1242.20-125.43 1253.40-123.41Q1264.60-121.40 1274.31-117.64Q1284.03-113.88 1292.60-108.28Q1301.17-102.68 1309.40-95.33L1303.97-87.45Q1302.58-85.35 1299.60-85.35Q1298.03-85.35 1295.58-87.19Q1293.13-89.03 1289.36-91.74Q1285.60-94.45 1280.26-97.69Q1274.92-100.93 1267.58-103.64Q1260.22-106.35 1250.60-108.19Q1240.97-110.03 1228.72-110.03Q1206.15-110.03 1187.25-102.24Q1168.35-94.45 1154.70-80.01Q1141.05-65.58 1133.44-45.01Q1125.83-24.45 1125.83 1.10Q1125.83 27.35 1133.35 48.00Q1140.88 68.65 1154.17 82.91Q1167.47 97.17 1185.59 104.79Q1203.70 112.40 1224.88 112.40Q1238.17 112.40 1248.59 110.65Q1259 108.90 1267.75 105.40Q1276.50 101.90 1284.03 96.82Q1291.55 91.75 1298.90 84.92Q1299.78 84.22 1300.56 83.79Q1301.35 83.35 1302.40 83.35ZM1530.42-122.63L1530.42-107.40L1443.45-107.40L1443.45 125L1425.60 125L1425.60-107.40L1338.10-107.40L1338.10-122.63L1530.42-122.63Z\"\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t</svg>\n\t\t);\n\t}\n}\n\nexport const InvertedLogo = props => <Logo inverted {...props} />;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/alviiin./Desktop/sem3/research/preact-www/src/components/routes.jsx",
    "messages": [
      {
        "ruleId": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: This experimental syntax requires enabling one of the following parser plugin(s): \"jsx\", \"flow\", \"typescript\". (18:2)",
        "line": 18,
        "column": 2,
        "nodeType": null
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useState } from 'preact/hooks';\nimport { Router, Route, lazy } from 'preact-iso';\nimport { Page } from './controllers/page';\nimport { DocPage } from './controllers/doc-page';\nimport { NotFound } from './controllers/not-found';\nimport { navRoutes } from '../lib/route-utils';\n\nconst Repl = lazy(() => import('./controllers/repl-page'));\nconst BlogPage = lazy(() => import('./controllers/blog-page'));\nconst TutorialPage = lazy(() => import('./controllers/tutorial-page'));\n\n// @ts-ignore\nconst routeChange = url => typeof ga === 'function' && ga('send', 'pageview', url);\n\nexport default function Routes() {\n\tconst [loading, setLoading] = useState(false);\n\treturn (\n\t\t<main>\n\t\t\t<loading-bar showing={loading} />\n\t\t\t<Router\n\t\t\t\tonLoadStart={() => setLoading(true)}\n\t\t\t\tonLoadEnd={() => setLoading(false)}\n\t\t\t\tonRouteChange={routeChange}\n\t\t\t>\n\t\t\t\t{Object.keys(navRoutes)\n\t\t\t\t\t.filter(route => !route.startsWith('/guide'))\n\t\t\t\t\t.filter(route => !route.startsWith('/tutorial'))\n\t\t\t\t\t.map(route => {\n\t\t\t\t\t\tconst component = route === '/repl' ? Repl : Page;\n\t\t\t\t\t\treturn <Route key={route} path={route} component={component} />;\n\t\t\t\t\t})}\n\t\t\t\t<Route path=\"/tutorial/:step?\" component={TutorialPage} />\n\t\t\t\t<Route path=\"/guide/:version/:name\" component={DocPage} />\n\t\t\t\t<Route path=\"/blog/:slug\" component={BlogPage} />\n\t\t\t\t<Route default component={NotFound} />\n\t\t\t</Router>\n\t\t</main>\n\t);\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/alviiin./Desktop/sem3/research/preact-www/src/components/sidebar/index.jsx",
    "messages": [
      {
        "ruleId": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: This experimental syntax requires enabling one of the following parser plugin(s): \"jsx\", \"flow\", \"typescript\". (44:2)",
        "line": 44,
        "column": 2,
        "nodeType": null
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useRoute } from 'preact-iso';\nimport DocVersion from '../doc-version';\nimport SidebarNav from './sidebar-nav';\nimport config from '../../config.json';\nimport { useOverlayToggle } from '../../lib/toggle-overlay';\nimport { getRouteName } from '../header';\nimport { useLanguage } from '../../lib/i18n';\nimport style from './style.module.css';\n\nexport default function Sidebar() {\n\tconst { version } = useRoute().params;\n\tconst [lang] = useLanguage();\n\tconst [open, setOpen] = useOverlayToggle();\n\n\tconst navItems = [];\n\tconst routes = config.docs[version];\n\tfor (let i = 0; i < routes.length; i++) {\n\t\tconst item = routes[i];\n\t\tif (item.routes) {\n\t\t\tnavItems.push({\n\t\t\t\ttext: getRouteName(item, lang),\n\t\t\t\tlevel: 2,\n\t\t\t\thref: null,\n\t\t\t\troutes: item.routes.map(nested => ({\n\t\t\t\t\ttext: getRouteName(nested, lang),\n\t\t\t\t\tlevel: 3,\n\t\t\t\t\thref: `/guide/${version}${nested.path}`\n\t\t\t\t}))\n\t\t\t});\n\t\t} else {\n\t\t\tnavItems.push({\n\t\t\t\ttext: getRouteName(item, lang),\n\t\t\t\tlevel: 2,\n\t\t\t\thref: `/guide/${version}${item.path}`\n\t\t\t});\n\t\t}\n\t}\n\n\t// TODO: use URL match instead of .content\n\tconst guide = config.nav.filter(item => item.content === 'guide')[0];\n\tconst sectionName = getRouteName(guide, lang);\n\n\treturn (\n\t\t<div class={style.wrapper} data-open={open}>\n\t\t\t<button\n\t\t\t\tclass={style.toggle}\n\t\t\t\tonClick={() => setOpen(v => !v)}\n\t\t\t\tvalue=\"sidebar\"\n\t\t\t>\n\t\t\t\t{sectionName}\n\t\t\t</button>\n\t\t\t<aside class={style.sidebar}>\n\t\t\t\t<div class={style.sidebarInner}>\n\t\t\t\t\t<DocVersion />\n\t\t\t\t\t<SidebarNav items={navItems} onClick={() => setOpen(false)} />\n\t\t\t\t</div>\n\t\t\t</aside>\n\t\t</div>\n\t);\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/alviiin./Desktop/sem3/research/preact-www/src/components/sidebar/sidebar-nav.jsx",
    "messages": [
      {
        "ruleId": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: This experimental syntax requires enabling one of the following parser plugin(s): \"jsx\", \"flow\", \"typescript\". (20:2)",
        "line": 20,
        "column": 2,
        "nodeType": null
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useRoute } from 'preact-iso';\nimport cx from '../../lib/cx';\nimport { prefetchContent } from '../../lib/use-resource';\nimport style from './sidebar-nav.module.css';\n\n/**\n * @typedef {object} SidebarNavProps\n * @property {any[]} items\n * @property {() => void} onClick\n */\n\n/**\n * The navigation menu in the sidebar\n * @param {SidebarNavProps} props\n */\nexport default function SidebarNav({ items, onClick }) {\n\tconst { path } = useRoute();\n\n\treturn (\n\t\t<nav class={cx(style.toc, !(items && items.length > 1) && style.disabled)}>\n\t\t\t{items.map(({ text, level, href, routes }) => {\n\t\t\t\tif (!href) {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<SidebarGroup level={level}>{text}</SidebarGroup>\n\t\t\t\t\t\t\t<div class={style.accordionBody}>\n\t\t\t\t\t\t\t\t{routes.map(route => {\n\t\t\t\t\t\t\t\t\tconst { href, text } = route;\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<SidebarNavLink\n\t\t\t\t\t\t\t\t\t\t\tkey={href}\n\t\t\t\t\t\t\t\t\t\t\thref={href}\n\t\t\t\t\t\t\t\t\t\t\tonClick={onClick}\n\t\t\t\t\t\t\t\t\t\t\tisActive={href === path}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{text}\n\t\t\t\t\t\t\t\t\t\t</SidebarNavLink>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</>\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn (\n\t\t\t\t\t<SidebarNavLink\n\t\t\t\t\t\tkey={href}\n\t\t\t\t\t\thref={href}\n\t\t\t\t\t\tonClick={onClick}\n\t\t\t\t\t\tisActive={href === path}\n\t\t\t\t\t>\n\t\t\t\t\t\t{text}\n\t\t\t\t\t</SidebarNavLink>\n\t\t\t\t);\n\t\t\t})}\n\t\t</nav>\n\t);\n}\n\nfunction SidebarGroup({ level, children }) {\n\treturn (\n\t\t<h3 className={cx(style.category, style['level-' + level])}>{children}</h3>\n\t);\n}\n\nfunction SidebarNavLink(props) {\n\tconst { href, onClick, level, isActive, children } = props;\n\tlet activeCss = isActive ? style.linkActive : undefined;\n\treturn (\n\t\t<a\n\t\t\thref={href}\n\t\t\tonClick={onClick}\n\t\t\tonMouseOver={() => prefetchContent(href)}\n\t\t\tclass={cx(style.link, activeCss, style['level-' + level])}\n\t\t>\n\t\t\t{children}\n\t\t</a>\n\t);\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/alviiin./Desktop/sem3/research/preact-www/src/components/splitter/index.jsx",
    "messages": [
      {
        "ruleId": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: This experimental syntax requires enabling one of the following parser plugin(s): \"jsx\", \"flow\", \"typescript\". (50:2)",
        "line": 50,
        "column": 2,
        "nodeType": null
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useCallback } from 'preact/hooks';\nimport cx from '../../lib/cx';\nimport s from './splitter.module.css';\n\n/**\n * @param {{orientation: \"horizontal\" | \"vertical\", initial?: string, children: any, other: any, force?: string | undefined}} props\n */\nexport function Splitter({\n\torientation,\n\tinitial = '50%',\n\tchildren,\n\tother,\n\tforce\n}) {\n\tconst splitterPointerDown = useCallback(e => {\n\t\tlet target = e.target;\n\t\tlet root = target.parentNode;\n\t\tlet v, perc, w, pid;\n\t\tfunction move(e) {\n\t\t\tconst isHorizontal = orientation === 'horizontal';\n\t\t\tconst pos = isHorizontal ? e.pageX : e.pageY;\n\n\t\t\tif (v == null) {\n\t\t\t\tpid = e.pointerId;\n\t\t\t\ttarget.setPointerCapture(pid);\n\t\t\t\tv = pos;\n\t\t\t\tperc = parseFloat(root.style.getPropertyValue('--size') || initial);\n\t\t\t\tw = isHorizontal ? root.offsetWidth : root.offsetHeight;\n\t\t\t} else {\n\t\t\t\tlet p = Math.max(20, Math.min(80, perc + ((pos - v) / w) * 100));\n\t\t\t\troot.style.setProperty('--size', `${p.toFixed(2)}%`);\n\t\t\t}\n\t\t}\n\t\tfunction up(e) {\n\t\t\tmove(e);\n\t\t\tcancel(e);\n\t\t}\n\t\tfunction cancel() {\n\t\t\ttarget.releasePointerCapture(pid);\n\t\t\tremoveEventListener('pointermove', move);\n\t\t\tremoveEventListener('pointerup', up);\n\t\t\tremoveEventListener('pointercancel', cancel);\n\t\t}\n\t\taddEventListener('pointermove', move);\n\t\taddEventListener('pointerup', up);\n\t\taddEventListener('pointercancel', cancel);\n\t}, []);\n\n\treturn (\n\t\t<div\n\t\t\tref={(n) => n?.style.setProperty('--size', force || initial)}\n\t\t\tclass={cx(\n\t\t\t\ts.container,\n\t\t\t\torientation === 'horizontal' ? s.horizontal : s.vertical\n\t\t\t)}\n\t\t>\n\t\t\t<div class={cx(s.first, s.area)}>{children}</div>\n\t\t\t<div class={s.splitter} onPointerDown={splitterPointerDown} />\n\t\t\t<div class={cx(s.second, s.area)}>{other}</div>\n\t\t</div>\n\t);\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/alviiin./Desktop/sem3/research/preact-www/src/components/sponsors/index.jsx",
    "messages": [
      {
        "ruleId": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: This experimental syntax requires enabling one of the following parser plugin(s): \"jsx\", \"flow\", \"typescript\". (50:2)",
        "line": 50,
        "column": 2,
        "nodeType": null
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import styles from './style.module.css';\n\n// If you're adding your company to this list, add your logo to `src/assets/sponsor-icons.svg`\nconst sponsors = [\n\t{\n\t\tlink: 'https://opencollective.com/2021-frameworks-fund',\n\t\ttitle: 'Chrome Frameworks Fund',\n\t\twidth: '63',\n\t\theight: '63',\n\t\tid: 'chrome'\n\t},\n\t{\n\t\tlink: 'https://tech.trivago.com/categories/open-source/',\n\t\ttitle: 'Trivago',\n\t\twidth: '102',\n\t\theight: '32',\n\t\tid: 'trivago'\n\t},\n\t{\n\t\tlink: 'https://deno.com',\n\t\ttitle: 'Deno',\n\t\twidth: '330',\n\t\theight: '330',\n\t\tid: 'deno'\n\t},\n\t{\n\t\tlink: 'https://songsterr.com',\n\t\ttitle: 'Songsterr',\n\t\twidth: '26',\n\t\theight: '30',\n\t\tid: 'songsterr'\n\t},\n\t{\n\t\tlink: 'https://tech.loveholidays.com',\n\t\ttitle: 'loveholidays',\n\t\twidth: '160',\n\t\theight: '32',\n\t\tid: 'loveholidays'\n\t}\n];\n\n/**\n * Sponsors on the main page is a unique selling point of our\n * gold and platinum tier on opencollective. See:\n * https://opencollective.com/preact for an overview of\n * available tiers and their advantages.\n */\nexport default function Sponsors() {\n\treturn (\n\t\t<ul class={styles.sponsorList}>\n\t\t\t{sponsors.map(sponsor => (\n\t\t\t\t<SponsorItem {...sponsor} />\n\t\t\t))}\n\t\t</ul>\n\t);\n}\n\nfunction SponsorItem({ link, title, width, height, id }) {\n\treturn (\n\t\t<li class={styles.sponsorItem}>\n\t\t\t<a href={link} title={title} target=\"_blank\" rel=\"noopener noreferrer nofollow sponsored\">\n\t\t\t\t<svg aria-hidden viewBox={`0 0 ${width} ${height}`}>\n\t\t\t\t\t<use href={`/sponsor-icons.svg#${id}`} />\n\t\t\t\t</svg>\n\t\t\t</a>\n\t\t</li>\n\t);\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/alviiin./Desktop/sem3/research/preact-www/src/components/table-of-contents/index.jsx",
    "messages": [
      {
        "ruleId": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: This experimental syntax requires enabling one of the following parser plugin(s): \"jsx\", \"flow\", \"typescript\". (20:32)",
        "line": 20,
        "column": 32,
        "nodeType": null
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { createContext } from 'preact';\nimport { useContext, useMemo, useRef } from 'preact/hooks';\n\n/** @type {import('preact').Context<{ toc: any}>} */\nexport const TocContext = createContext({ toc: null });\n\nexport default function Toc() {\n\tconst ref = useRef(null);\n\tconst cache = useRef([]);\n\n\tconst { toc } = useContext(TocContext);\n\n\t// eslint-disable-next-line\n\tconst items = useMemo(() => {\n\t\treturn toc !== null\n\t\t\t? (cache.current = listToTree(toc))\n\t\t\t: cache.current || [];\n\t}, [toc]);\n\n\tif (items.length === 0) return <div ref={ref} />;\n\n\treturn (\n\t\t<div ref={ref}>\n\t\t\t<nav onFocus={this.open}>\n\t\t\t\t<ul>\n\t\t\t\t\t{items.map(entry => (\n\t\t\t\t\t\t<TocItem {...entry} />\n\t\t\t\t\t))}\n\t\t\t\t</ul>\n\t\t\t</nav>\n\t\t</div>\n\t);\n}\n\n// Toc always starts at h2\nexport function listToTree(arr) {\n\tif (arr.length == 0) return [];\n\n\t// Prepare list\n\tconst list = arr.map(x => ({ ...x, level: x.level - 2, children: [] }));\n\n\tconst tree = [];\n\n\tconst lastLevelItems = new Array(6);\n\tfor (let i = 0; i < list.length; i++) {\n\t\tconst node = list[i];\n\t\tconst level = node.level;\n\t\tif (level > 0 && lastLevelItems[level - 1]) {\n\t\t\tlastLevelItems[level - 1].children.push(node);\n\t\t} else if (level === 0) {\n\t\t\ttree.push(node);\n\t\t}\n\n\t\tlastLevelItems[level] = node;\n\t}\n\n\treturn tree;\n}\n\nexport function TocItem(props) {\n\tconst { id, text, children } = props;\n\n\treturn (\n\t\t<li>\n\t\t\t<a href={'#' + id}>{text}</a>\n\t\t\t{children.length > 0 && (\n\t\t\t\t<ul>\n\t\t\t\t\t{children.map(entry => (\n\t\t\t\t\t\t<TocItem key={entry.id} {...entry} />\n\t\t\t\t\t))}\n\t\t\t\t</ul>\n\t\t\t)}\n\t\t</li>\n\t);\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/alviiin./Desktop/sem3/research/preact-www/src/components/time/index.jsx",
    "messages": [
      {
        "ruleId": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: This experimental syntax requires enabling one of the following parser plugin(s): \"jsx\", \"flow\", \"typescript\". (9:2)",
        "line": 9,
        "column": 2,
        "nodeType": null
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import s from './time.module.css';\n\nexport function Time({ value }) {\n\tconst date = new Date(value + 'T00:00');\n\tconst day = date.toLocaleDateString\n\t\t? date.toLocaleDateString()\n\t\t: date.toDateString();\n\treturn (\n\t\t<time class={s.time} dateTime={date.toISOString()}>\n\t\t\t{day}\n\t\t</time>\n\t);\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/alviiin./Desktop/sem3/research/preact-www/src/components/todo-list.jsx",
    "messages": [
      {
        "ruleId": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: This experimental syntax requires enabling one of the following parser plugin(s): \"jsx\", \"flow\", \"typescript\". (21:3)",
        "line": 21,
        "column": 3,
        "nodeType": null
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Component } from 'preact';\n\nexport default class TodoList extends Component {\n\tstate = {\n\t\ttodos: [],\n\t\ttext: ''\n\t};\n\n\tupdateText = e => {\n\t\tthis.setState({ text: e.target.value });\n\t};\n\n\taddItem = () => {\n\t\tlet { todos, text } = this.state;\n\t\ttodos = todos.concat({ text });\n\t\tthis.setState({ todos, text: '' });\n\t};\n\n\trender(props, { todos, text }) {\n\t\treturn (\n\t\t\t<form onSubmit={this.addItem} action=\"javascript:\">\n\t\t\t\t<label>\n\t\t\t\t\t<span>Add Todo</span>\n\t\t\t\t\t<input value={text} onInput={this.updateText} />\n\t\t\t\t</label>\n\t\t\t\t<button type=\"submit\">Add</button>\n\t\t\t\t<ul>\n\t\t\t\t\t{todos.map(todo => (\n\t\t\t\t\t\t<li>{todo.text}</li>\n\t\t\t\t\t))}\n\t\t\t\t</ul>\n\t\t\t</form>\n\t\t);\n\t}\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/alviiin./Desktop/sem3/research/preact-www/src/components/we-are-using/index.jsx",
    "messages": [
      {
        "ruleId": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: This experimental syntax requires enabling one of the following parser plugin(s): \"jsx\", \"flow\", \"typescript\". (286:2)",
        "line": 286,
        "column": 2,
        "nodeType": null
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import styles from './style.module.css';\n\n// Add your company to this array. The logo should be placed\n// in `src/assets/we-are-using/my-logo.svg`.\nconst companies = [\n\t{\n\t\tname: 'Babbel',\n\t\thref: 'https://www.babbel.com/',\n\t\tlogo: 'babbel.svg'\n\t},\n\t{\n\t\tname: 'Groupon',\n\t\thref: 'https://groupon.com/',\n\t\tlogo: 'groupon.svg'\n\t},\n\t{\n\t\tname: 'Tencent QQ',\n\t\thref: 'https://im.qq.com/',\n\t\tlogo: 'qq.png'\n\t},\n\t{\n\t\tname: 'Etsy',\n\t\thref: 'https://etsy.com',\n\t\tlogo: 'etsy.svg'\n\t},\n\t{\n\t\tname: 'Housing.com',\n\t\thref: 'https://housing.com/',\n\t\tlogo: 'housing.png'\n\t},\n\t{\n\t\tname: 'Deno',\n\t\thref: 'https://deno.land/',\n\t\tlogo: 'deno.svg'\n\t},\n\t{\n\t\tname: 'The New York Times',\n\t\thref: 'https://nytimes.com/',\n\t\tlogo: 'nytimes.png'\n\t},\n\t{\n\t\tname: 'Lyft',\n\t\thref: 'https://lyft.com/',\n\t\tlogo: 'lyft.svg'\n\t},\n\t{\n\t\tname: 'Pepsi',\n\t\thref: 'https://pepsi.com/',\n\t\tlogo: 'pepsi.png'\n\t},\n\t{\n\t\tname: 'Huayang Live',\n\t\thref: 'https://huayang.qq.com/',\n\t\tlogo: 'huayang.png'\n\t},\n\t{\n\t\tname: 'Uber',\n\t\thref: 'https://uber.com/',\n\t\tlogo: 'uber.png'\n\t},\n\t{\n\t\tname: 'Treebo',\n\t\thref: 'https://www.treebo.com/',\n\t\tlogo: 'treebo.svg'\n\t},\n\t{\n\t\tname: 'dailymotion',\n\t\thref: 'https://dailymotion.com/',\n\t\tlogo: 'dailymotion.svg'\n\t},\n\t{\n\t\tname: 'Smashing Magazine',\n\t\thref: 'https://next.smashingmagazine.com/',\n\t\tlogo: 'smashingmagazine.png'\n\t},\n\t{\n\t\tname: 'Bustle',\n\t\thref: 'https://bustle.com/',\n\t\tlogo: 'bustle.svg'\n\t},\n\t{\n\t\tname: 'Financial Times',\n\t\thref: 'https://ft.com/',\n\t\tlogo: 'financial-times.svg'\n\t},\n\t{\n\t\tname: 'IRCTC Ecatering',\n\t\thref: 'https://www.ecatering.irctc.co.in/',\n\t\tlogo: 'irctc-ecatering.svg'\n\t},\n\t{\n\t\tname: 'HashiCorp',\n\t\thref: 'https://hashicorp.com/',\n\t\tlogo: 'hashicorp.svg'\n\t},\n\t{\n\t\tname: 'Broadway.com',\n\t\thref: 'https://broadway.com/',\n\t\tlogo: 'broadway.png'\n\t},\n\t{\n\t\tname: 'Sogou wenwen',\n\t\thref: 'https://wenwen.sogou.com/',\n\t\tlogo: 'sogou.png'\n\t},\n\t{\n\t\tname: 'Algolia Instantsearch.js',\n\t\thref: 'https://community.algolia.com/instantsearch.js/v2/',\n\t\tlogo: 'algolia.png'\n\t},\n\t{\n\t\tname: 'Songwhip',\n\t\thref: 'https://songwhip.com/',\n\t\tlogo: 'songwhip.svg'\n\t},\n\t{\n\t\tname: 'Native Instruments',\n\t\thref: 'https://native-instruments.com/',\n\t\tlogo: 'native-instruments.png'\n\t},\n\t{\n\t\tname: 'The DEV Community',\n\t\thref: 'https://dev.to/',\n\t\tlogo: 'thepracticaldev.png'\n\t},\n\t{\n\t\tname: 'inSided',\n\t\thref: 'https://insided.com/',\n\t\tlogo: 'insided.svg'\n\t},\n\t{\n\t\tname: \"Domino's\",\n\t\thref: 'https://www.dominos.com/',\n\t\tlogo: 'dominos.svg'\n\t},\n\t{\n\t\tname: 'Neo4j',\n\t\thref: 'https://neo4j.com/',\n\t\tlogo: 'neo4j.png'\n\t},\n\t{\n\t\tname: 'Westwing',\n\t\thref: 'https://westwing.de/',\n\t\tlogo: 'westwing.png'\n\t},\n\t{\n\t\tname: 'Synacor',\n\t\thref: 'https://www.synacor.com/',\n\t\tlogo: 'synacor.png'\n\t},\n\t{\n\t\tname: 'The Coral Project',\n\t\thref: 'https://coralproject.net/',\n\t\tlogo: 'thecoralproject.png'\n\t},\n\t{\n\t\tname: 'NAMSHI',\n\t\thref: 'https://en-ae.namshi.com/',\n\t\tlogo: 'namshi.png'\n\t},\n\t{\n\t\tname: 'WELL Messenger',\n\t\thref: 'https://wellapp.com/',\n\t\tlogo: 'wellapp.png'\n\t},\n\t{\n\t\tname: 'andcards',\n\t\thref: 'https://andcards.com/',\n\t\tlogo: 'andcards.png'\n\t},\n\t{\n\t\tname: 'Selly',\n\t\thref: 'https://selly.gg/',\n\t\tlogo: 'selly.png'\n\t},\n\t{\n\t\tname: 'Tradeshift',\n\t\thref: 'https://tradeshift.com/',\n\t\tlogo: 'tradeshift.png'\n\t},\n\t{\n\t\tname: 'Bakken & Baeck',\n\t\thref: 'https://bakkenbaeck.no/',\n\t\tlogo: 'bakkenbaeck.svg'\n\t},\n\t{\n\t\tname: 'Leesa Sleep',\n\t\thref: 'https://leesa.com/',\n\t\tlogo: 'leesa.svg'\n\t},\n\t{\n\t\tname: 'ANWB',\n\t\thref: 'https://anwb.nl/',\n\t\tlogo: 'anwb.svg'\n\t},\n\t{\n\t\tname: 'Mopinion',\n\t\thref: 'https://mopinion.com/',\n\t\tlogo: 'mopinion.svg'\n\t},\n\t{\n\t\tname: 'Narcity Media',\n\t\thref: 'https://www.narcity.com/',\n\t\tlogo: 'narcitymedia.png'\n\t},\n\t{\n\t\tname: 'Lilium CMS',\n\t\thref: 'https://liliumcms.com/',\n\t\tlogo: 'lmllogo.png'\n\t},\n\t{\n\t\tname: 'Rocket.Chat',\n\t\thref: 'https://rocket.chat/',\n\t\tlogo: 'rocketchat.svg'\n\t},\n\t{\n\t\tname: 'BlueHive',\n\t\thref: 'https://www.bluehive.com/',\n\t\tlogo: 'bluehive.svg'\n\t},\n\t{\n\t\tname: 'Bodybuilding.com',\n\t\thref: 'https://bodybuilding.com/',\n\t\tlogo: 'bodybuildingcom.svg'\n\t},\n\t{\n\t\tname: 'Doxford Pet Software',\n\t\thref: 'https://doxford.net',\n\t\tlogo: 'doxford.png'\n\t},\n\t{\n\t\tname: 'SmartRate',\n\t\thref: 'https://www.smartrate.se',\n\t\tlogo: 'smartrate.png'\n\t},\n\t{\n\t\tname: 'Hugo Insurance',\n\t\thref: 'https://withhugo.com/',\n\t\tlogo: 'hugo.svg'\n\t},\n\t{\n\t\tname: 'Datapedia',\n\t\thref: 'https://datapedia.info/',\n\t\tlogo: 'datapedia.png'\n\t},\n\t{\n\t\tname: 'Glance',\n\t\thref: 'https://glance.com/',\n\t\tlogo: 'glance.png'\n\t},\n\t{\n\t\tname: 'Snapp!',\n\t\thref: 'https://snapp.ir/',\n\t\tlogo: 'snapp.png'\n\t},\n\t{\n\t\tname: 'Adyen',\n\t\thref: 'https://www.adyen.com/',\n\t\tlogo: 'adyen.svg'\n\t},\n\t{\n\t\tname: 'SQL Frames',\n\t\thref: 'https://sqlframes.com/',\n\t\tlogo: 'sqlframes.svg'\n\t},\n\t{\n\t\tname: 'Refract',\n\t\thref: 'https://refractbot.com/',\n\t\tlogo: 'refract.svg'\n\t},\n\t{\n\t\tname: 'Zeplin',\n\t\thref: 'https://zeplin.io',\n\t\tlogo: 'zeplin.svg'\n\t},\n\t{\n\t\tname: 'Loveholidays',\n\t\thref: 'https://loveholidays.com',\n\t\tlogo: 'loveholidays.svg'\n\t}\n];\n\n// Grid of companies using Preact\nexport default function WeAreUsing() {\n\treturn (\n\t\t<ul class={styles.root}>\n\t\t\t{companies.map(c => (\n\t\t\t\t<li key={c.name} class={styles.item}>\n\t\t\t\t\t<a\n\t\t\t\t\t\thref={c.href}\n\t\t\t\t\t\ttitle={c.name}\n\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\trel=\"noopener noreferrer\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<img src={`/we-are-using/${c.logo}`} alt={c.name} />\n\t\t\t\t\t</a>\n\t\t\t\t</li>\n\t\t\t))}\n\t\t</ul>\n\t);\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/alviiin./Desktop/sem3/research/preact-www/src/index.jsx",
    "messages": [
      {
        "ruleId": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: This experimental syntax requires enabling one of the following parser plugin(s): \"jsx\", \"flow\", \"typescript\". (14:9)",
        "line": 14,
        "column": 9,
        "nodeType": null
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import * as preact from 'preact';\nimport * as hooks from 'preact/hooks';\nimport { hydrate, prerender as ssr } from 'preact-iso';\n\nimport App from './components/app';\nimport './analytics';\nimport './style/index.css';\n\n// allows users to play with preact in the browser developer console\nglobalThis.preact = { ...preact, ...hooks };\n\n\nif (typeof window !== 'undefined') {\n\thydrate(<App />, document.getElementById('app'));\n\n\t// Might need to keep this around indefinitely, unfortunately\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.getRegistrations().then(registrations => {\n\t\t\tfor (const registration of registrations) {\n\t\t\t\tregistration.unregister();\n\t\t\t}\n\t\t});\n\t}\n}\n\nlet initialized = false,\n\tprerenderData = {\n\t\tpreactVersion: '',\n\t\tpreactReleaseURL: '',\n\t\tpreactStargazers: 0\n\t};\nexport async function prerender() {\n\tconst init = async () => {\n\t\t// DOMParser polyfill for `preact-markup`\n\t\tconst { DOMParser } = await import('@xmldom/xmldom');\n\t\tglobalThis.DOMParser = DOMParser;\n\n\t\t// fetch latest release data\n\t\tconst { default: releaseLambda } = await import('./lambda/release.js');\n\t\tconst { version, url } = await (await releaseLambda()).json();\n\t\tprerenderData.preactVersion = version;\n\t\tprerenderData.preactReleaseURL = url;\n\n\t\t// fetch latest stargazer count\n\t\tconst { default: repoLambda } = await import('./lambda/repo.js');\n\t\tconst { stargazers_count: stargazersCount } = await (await repoLambda()).json();\n\t\tprerenderData.preactStargazers = stargazersCount;\n\n\t\tinitialized = true;\n\t};\n\tif (!initialized) await init();\n\n\tconst res = await ssr(<App prerenderData={prerenderData} />);\n\n\tconst elements = new Set([\n\t\t{ type: 'meta', props: { name: 'description', content: globalThis.description } },\n\t\t{ type: 'meta', props: { property: 'og:url', content: `https://preactjs.com${location.pathname}` } },\n\t\t{ type: 'meta', props: { property: 'og:title', content: globalThis.title } },\n\t\t{ type: 'meta', props: { property: 'og:description', content: globalThis.description } },\n\t\tlocation.pathname.includes('/v8/') && { type: 'meta', props: { name: 'robots', content: 'noindex' } },\n\t\tprocess.env.BRANCH && { type: 'script', children: `ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga('set','dimension1','${process.env.BRANCH}');onerror=function(e,f,l,c){ga('send','event','exception',e,f+':'+l+':'+c)}` }\n\t].filter(Boolean));\n\n\tres.html += '<script async defer src=\"https://www.google-analytics.com/analytics.js\"></script>';\n\n\treturn {\n\t\t...res,\n\t\tdata: prerenderData,\n\t\thead: {\n\t\t\tlang: 'en',\n\t\t\ttitle: globalThis.title,\n\t\t\telements\n\t\t}\n\t};\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/alviiin./Desktop/sem3/research/preact-www/src/lib/i18n.jsx",
    "messages": [
      {
        "ruleId": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: This experimental syntax requires enabling one of the following parser plugin(s): \"jsx\", \"flow\", \"typescript\". (62:2)",
        "line": 62,
        "column": 2,
        "nodeType": null
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { createContext } from 'preact';\nimport { useContext, useEffect } from 'preact/hooks';\nimport { useLocation } from 'preact-iso';\nimport { useStoredValue } from './localstorage';\nimport config from '../config.json';\n\n/**\n * @typedef LanguageContext\n * @property {string} lang\n * @property {(string) => void} setLang\n */\n\n/**\n * @type {import('preact').Context<LanguageContext>}\n */\nconst LanguageContext = createContext(/** @type {LanguageContext} */ ({}));\n\n/**\n * Get the default language based on the preferred preference of the browser\n * @param {Record<string, string>} available All available languages\n * @param {string} [override]\n * @returns {string | undefined}\n */\nexport function getDefaultLanguage(available, override) {\n\tif (typeof navigator === 'undefined') return;\n\n\t// Override via `?lang=foo` parameter\n\tif (override && config.languages[override]) {\n\t\treturn override;\n\t}\n\n\tlet langs = [navigator.language].concat(navigator.languages);\n\tfor (let i = 0; i < langs.length; i++) {\n\t\tif (langs[i]) {\n\t\t\tlet lang = String(langs[i]).toLowerCase();\n\t\t\tif (available[lang]) return lang;\n\t\t\t// Respect order of `navigator.languages` by returning if the fallback language `English` is found\n\t\t\tif (lang === 'en') return;\n\t\t}\n\t}\n}\n\nexport function LanguageProvider({ children }) {\n\tconst { query } = useLocation();\n\n\tconst [lang, setLang] = useStoredValue(\n\t\t'lang',\n\t\tgetDefaultLanguage(config.languages, query.lang) || 'en',\n\t\t!!query.lang\n\t);\n\n\tuseEffect(() => {\n\t\tdocument.documentElement.lang = lang;\n\t}, []);\n\n\tconst setAndUpdateHtmlAttr = (lang) => {\n\t\tsetLang(lang);\n\t\tdocument.documentElement.lang = lang;\n\t};\n\n\treturn (\n\t\t<LanguageContext.Provider value={{ lang, setLang: setAndUpdateHtmlAttr }}>\n\t\t\t{children}\n\t\t</LanguageContext.Provider>\n\t);\n}\n\n/**\n * Handles all logic related to language settings\n * @returns {[string, (v: string) => void]}\n */\nexport function useLanguage() {\n\tconst { lang, setLang } = useContext(LanguageContext);\n\treturn [lang, setLang];\n}\n\n/**\n * Get the translation of a key. Defaults to english if no translation is found\n * @param {string} key\n */\nexport function useTranslation(key) {\n\tconst [lang] = useLanguage();\n\tconst data = config.i18n[key];\n\treturn data[lang] || data.en;\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/alviiin./Desktop/sem3/research/preact-www/src/lib/prerender-data.jsx",
    "messages": [
      {
        "ruleId": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: This experimental syntax requires enabling one of the following parser plugin(s): \"jsx\", \"flow\", \"typescript\". (35:2)",
        "line": 35,
        "column": 2,
        "nodeType": null
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { createContext } from 'preact';\nimport { useContext } from 'preact/hooks';\n\n/**\n * @typedef {import('../types.d.ts').PrerenderData} PrerenderData\n */\n\n/**\n * @returns {PrerenderData | {}}\n */\nexport function getFallbackData() {\n\tif (typeof window === 'undefined') return {};\n\tconst el = document.getElementById('preact-prerender-data');\n\tif (!el) return {};\n\tconst data = JSON.parse(el.textContent);\n\treturn data;\n}\n\n/**\n * @type {import('preact').Context<PrerenderData>}\n */\nconst PrerenderDataContext = createContext(/** @type {PrerenderData} */ ({}));\n\n/**\n * @param {{ value?: PrerenderData, children: any }} props\n */\nexport function PrerenderDataProvider({ value, children }) {\n\tconst fallbackData = getFallbackData();\n\n\tconst preactVersion = value?.preactVersion || fallbackData.preactVersion;\n\tconst preactReleaseURL = value?.preactReleaseURL || fallbackData.preactReleaseUrl;\n\tconst preactStargazers = value?.preactStargazers || fallbackData.preactStargazers;\n\n\treturn (\n\t\t<PrerenderDataContext.Provider value={{ preactVersion, preactReleaseURL, preactStargazers }}>\n\t\t\t{children}\n\t\t</PrerenderDataContext.Provider>\n\t);\n}\n\n/**\n * @returns {PrerenderData}\n */\nexport function usePrerenderData() {\n\treturn useContext(PrerenderDataContext);\n}\n",
    "usedDeprecatedRules": []
  }
]